package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlayerPromoteExample {

	/**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    protected String orderByClause;
	/**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    protected List oredCriteria;

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    public PlayerPromoteExample() {
	    oredCriteria = new ArrayList();
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    protected PlayerPromoteExample(PlayerPromoteExample example) {
	    this.orderByClause = example.orderByClause;
	    this.oredCriteria = example.oredCriteria;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    public void setOrderByClause(String orderByClause) {
	    this.orderByClause = orderByClause;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    public String getOrderByClause() {
	    return orderByClause;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    public List getOredCriteria() {
	    return oredCriteria;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    public void or(Criteria criteria) {
	    oredCriteria.add(criteria);
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    public Criteria createCriteria() {
	    Criteria criteria = createCriteriaInternal();
	    if (oredCriteria.size() == 0) {
		    oredCriteria.add(criteria);
	    }
	    return criteria;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    protected Criteria createCriteriaInternal() {
	    Criteria criteria = new Criteria();
	    return criteria;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    public void clear() {
	    oredCriteria.clear();
    }

	/**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database table player_promote
     * @ibatorgenerated  Thu Jan 06 15:19:37 CST 2011
     */
    public static class Criteria {
	    protected List criteriaWithoutValue;
	    protected List criteriaWithSingleValue;
	    protected List criteriaWithListValue;
	    protected List criteriaWithBetweenValue;

	    protected Criteria() {
		    super();
		    criteriaWithoutValue = new ArrayList();
		    criteriaWithSingleValue = new ArrayList();
		    criteriaWithListValue = new ArrayList();
		    criteriaWithBetweenValue = new ArrayList();
	    }

	    public boolean isValid() {
		    return criteriaWithoutValue.size() > 0
		            || criteriaWithSingleValue.size() > 0
		            || criteriaWithListValue.size() > 0
		            || criteriaWithBetweenValue.size() > 0;
	    }

	    public List getCriteriaWithoutValue() {
		    return criteriaWithoutValue;
	    }

	    public List getCriteriaWithSingleValue() {
		    return criteriaWithSingleValue;
	    }

	    public List getCriteriaWithListValue() {
		    return criteriaWithListValue;
	    }

	    public List getCriteriaWithBetweenValue() {
		    return criteriaWithBetweenValue;
	    }

	    protected void addCriterion(String condition) {
		    if (condition == null) {
			    throw new RuntimeException("Value for condition cannot be null");
		    }
		    criteriaWithoutValue.add(condition);
	    }

	    protected void addCriterion(String condition, Object value,
	            String property) {
		    if (value == null) {
			    throw new RuntimeException("Value for " + property
			            + " cannot be null");
		    }
		    Map map = new HashMap();
		    map.put("condition", condition);
		    map.put("value", value);
		    criteriaWithSingleValue.add(map);
	    }

	    protected void addCriterion(String condition, List values,
	            String property) {
		    if (values == null || values.size() == 0) {
			    throw new RuntimeException("Value list for " + property
			            + " cannot be null or empty");
		    }
		    Map map = new HashMap();
		    map.put("condition", condition);
		    map.put("values", values);
		    criteriaWithListValue.add(map);
	    }

	    protected void addCriterion(String condition, Object value1,
	            Object value2, String property) {
		    if (value1 == null || value2 == null) {
			    throw new RuntimeException("Between values for " + property
			            + " cannot be null");
		    }
		    List list = new ArrayList();
		    list.add(value1);
		    list.add(value2);
		    Map map = new HashMap();
		    map.put("condition", condition);
		    map.put("values", list);
		    criteriaWithBetweenValue.add(map);
	    }

	    public Criteria andIdIsNull() {
		    addCriterion("id is null");
		    return this;
	    }

	    public Criteria andIdIsNotNull() {
		    addCriterion("id is not null");
		    return this;
	    }

	    public Criteria andIdEqualTo(Integer value) {
		    addCriterion("id =", value, "id");
		    return this;
	    }

	    public Criteria andIdNotEqualTo(Integer value) {
		    addCriterion("id <>", value, "id");
		    return this;
	    }

	    public Criteria andIdGreaterThan(Integer value) {
		    addCriterion("id >", value, "id");
		    return this;
	    }

	    public Criteria andIdGreaterThanOrEqualTo(Integer value) {
		    addCriterion("id >=", value, "id");
		    return this;
	    }

	    public Criteria andIdLessThan(Integer value) {
		    addCriterion("id <", value, "id");
		    return this;
	    }

	    public Criteria andIdLessThanOrEqualTo(Integer value) {
		    addCriterion("id <=", value, "id");
		    return this;
	    }

	    public Criteria andIdIn(List values) {
		    addCriterion("id in", values, "id");
		    return this;
	    }

	    public Criteria andIdNotIn(List values) {
		    addCriterion("id not in", values, "id");
		    return this;
	    }

	    public Criteria andIdBetween(Integer value1, Integer value2) {
		    addCriterion("id between", value1, value2, "id");
		    return this;
	    }

	    public Criteria andIdNotBetween(Integer value1, Integer value2) {
		    addCriterion("id not between", value1, value2, "id");
		    return this;
	    }

	    public Criteria andPlayerIdIsNull() {
		    addCriterion("player_id is null");
		    return this;
	    }

	    public Criteria andPlayerIdIsNotNull() {
		    addCriterion("player_id is not null");
		    return this;
	    }

	    public Criteria andPlayerIdEqualTo(Integer value) {
		    addCriterion("player_id =", value, "playerId");
		    return this;
	    }

	    public Criteria andPlayerIdNotEqualTo(Integer value) {
		    addCriterion("player_id <>", value, "playerId");
		    return this;
	    }

	    public Criteria andPlayerIdGreaterThan(Integer value) {
		    addCriterion("player_id >", value, "playerId");
		    return this;
	    }

	    public Criteria andPlayerIdGreaterThanOrEqualTo(Integer value) {
		    addCriterion("player_id >=", value, "playerId");
		    return this;
	    }

	    public Criteria andPlayerIdLessThan(Integer value) {
		    addCriterion("player_id <", value, "playerId");
		    return this;
	    }

	    public Criteria andPlayerIdLessThanOrEqualTo(Integer value) {
		    addCriterion("player_id <=", value, "playerId");
		    return this;
	    }

	    public Criteria andPlayerIdIn(List values) {
		    addCriterion("player_id in", values, "playerId");
		    return this;
	    }

	    public Criteria andPlayerIdNotIn(List values) {
		    addCriterion("player_id not in", values, "playerId");
		    return this;
	    }

	    public Criteria andPlayerIdBetween(Integer value1, Integer value2) {
		    addCriterion("player_id between", value1, value2, "playerId");
		    return this;
	    }

	    public Criteria andPlayerIdNotBetween(Integer value1, Integer value2) {
		    addCriterion("player_id not between", value1, value2, "playerId");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdIsNull() {
		    addCriterion("belonged_player_id is null");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdIsNotNull() {
		    addCriterion("belonged_player_id is not null");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdEqualTo(Integer value) {
		    addCriterion("belonged_player_id =", value, "belongedPlayerId");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdNotEqualTo(Integer value) {
		    addCriterion("belonged_player_id <>", value, "belongedPlayerId");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdGreaterThan(Integer value) {
		    addCriterion("belonged_player_id >", value, "belongedPlayerId");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdGreaterThanOrEqualTo(Integer value) {
		    addCriterion("belonged_player_id >=", value, "belongedPlayerId");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdLessThan(Integer value) {
		    addCriterion("belonged_player_id <", value, "belongedPlayerId");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdLessThanOrEqualTo(Integer value) {
		    addCriterion("belonged_player_id <=", value, "belongedPlayerId");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdIn(List values) {
		    addCriterion("belonged_player_id in", values, "belongedPlayerId");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdNotIn(List values) {
		    addCriterion("belonged_player_id not in", values,
		            "belongedPlayerId");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdBetween(Integer value1,
	            Integer value2) {
		    addCriterion("belonged_player_id between", value1, value2,
		            "belongedPlayerId");
		    return this;
	    }

	    public Criteria andBelongedPlayerIdNotBetween(Integer value1,
	            Integer value2) {
		    addCriterion("belonged_player_id not between", value1, value2,
		            "belongedPlayerId");
		    return this;
	    }

	    public Criteria andBonusIsNull() {
		    addCriterion("bonus is null");
		    return this;
	    }

	    public Criteria andBonusIsNotNull() {
		    addCriterion("bonus is not null");
		    return this;
	    }

	    public Criteria andBonusEqualTo(Integer value) {
		    addCriterion("bonus =", value, "bonus");
		    return this;
	    }

	    public Criteria andBonusNotEqualTo(Integer value) {
		    addCriterion("bonus <>", value, "bonus");
		    return this;
	    }

	    public Criteria andBonusGreaterThan(Integer value) {
		    addCriterion("bonus >", value, "bonus");
		    return this;
	    }

	    public Criteria andBonusGreaterThanOrEqualTo(Integer value) {
		    addCriterion("bonus >=", value, "bonus");
		    return this;
	    }

	    public Criteria andBonusLessThan(Integer value) {
		    addCriterion("bonus <", value, "bonus");
		    return this;
	    }

	    public Criteria andBonusLessThanOrEqualTo(Integer value) {
		    addCriterion("bonus <=", value, "bonus");
		    return this;
	    }

	    public Criteria andBonusIn(List values) {
		    addCriterion("bonus in", values, "bonus");
		    return this;
	    }

	    public Criteria andBonusNotIn(List values) {
		    addCriterion("bonus not in", values, "bonus");
		    return this;
	    }

	    public Criteria andBonusBetween(Integer value1, Integer value2) {
		    addCriterion("bonus between", value1, value2, "bonus");
		    return this;
	    }

	    public Criteria andBonusNotBetween(Integer value1, Integer value2) {
		    addCriterion("bonus not between", value1, value2, "bonus");
		    return this;
	    }

	    public Criteria andCreateDateIsNull() {
		    addCriterion("create_date is null");
		    return this;
	    }

	    public Criteria andCreateDateIsNotNull() {
		    addCriterion("create_date is not null");
		    return this;
	    }

	    public Criteria andCreateDateEqualTo(Date value) {
		    addCriterion("create_date =", value, "createDate");
		    return this;
	    }

	    public Criteria andCreateDateNotEqualTo(Date value) {
		    addCriterion("create_date <>", value, "createDate");
		    return this;
	    }

	    public Criteria andCreateDateGreaterThan(Date value) {
		    addCriterion("create_date >", value, "createDate");
		    return this;
	    }

	    public Criteria andCreateDateGreaterThanOrEqualTo(Date value) {
		    addCriterion("create_date >=", value, "createDate");
		    return this;
	    }

	    public Criteria andCreateDateLessThan(Date value) {
		    addCriterion("create_date <", value, "createDate");
		    return this;
	    }

	    public Criteria andCreateDateLessThanOrEqualTo(Date value) {
		    addCriterion("create_date <=", value, "createDate");
		    return this;
	    }

	    public Criteria andCreateDateIn(List values) {
		    addCriterion("create_date in", values, "createDate");
		    return this;
	    }

	    public Criteria andCreateDateNotIn(List values) {
		    addCriterion("create_date not in", values, "createDate");
		    return this;
	    }

	    public Criteria andCreateDateBetween(Date value1, Date value2) {
		    addCriterion("create_date between", value1, value2, "createDate");
		    return this;
	    }

	    public Criteria andCreateDateNotBetween(Date value1, Date value2) {
		    addCriterion("create_date not between", value1, value2,
		            "createDate");
		    return this;
	    }

	    public Criteria andPointsIsNull() {
		    addCriterion("points is null");
		    return this;
	    }

	    public Criteria andPointsIsNotNull() {
		    addCriterion("points is not null");
		    return this;
	    }

	    public Criteria andPointsEqualTo(Integer value) {
		    addCriterion("points =", value, "points");
		    return this;
	    }

	    public Criteria andPointsNotEqualTo(Integer value) {
		    addCriterion("points <>", value, "points");
		    return this;
	    }

	    public Criteria andPointsGreaterThan(Integer value) {
		    addCriterion("points >", value, "points");
		    return this;
	    }

	    public Criteria andPointsGreaterThanOrEqualTo(Integer value) {
		    addCriterion("points >=", value, "points");
		    return this;
	    }

	    public Criteria andPointsLessThan(Integer value) {
		    addCriterion("points <", value, "points");
		    return this;
	    }

	    public Criteria andPointsLessThanOrEqualTo(Integer value) {
		    addCriterion("points <=", value, "points");
		    return this;
	    }

	    public Criteria andPointsIn(List values) {
		    addCriterion("points in", values, "points");
		    return this;
	    }

	    public Criteria andPointsNotIn(List values) {
		    addCriterion("points not in", values, "points");
		    return this;
	    }

	    public Criteria andPointsBetween(Integer value1, Integer value2) {
		    addCriterion("points between", value1, value2, "points");
		    return this;
	    }

	    public Criteria andPointsNotBetween(Integer value1, Integer value2) {
		    addCriterion("points not between", value1, value2, "points");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateIsNull() {
		    addCriterion("last_exchange_points_date is null");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateIsNotNull() {
		    addCriterion("last_exchange_points_date is not null");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateEqualTo(Date value) {
		    addCriterion("last_exchange_points_date =", value,
		            "lastExchangePointsDate");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateNotEqualTo(Date value) {
		    addCriterion("last_exchange_points_date <>", value,
		            "lastExchangePointsDate");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateGreaterThan(Date value) {
		    addCriterion("last_exchange_points_date >", value,
		            "lastExchangePointsDate");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateGreaterThanOrEqualTo(Date value) {
		    addCriterion("last_exchange_points_date >=", value,
		            "lastExchangePointsDate");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateLessThan(Date value) {
		    addCriterion("last_exchange_points_date <", value,
		            "lastExchangePointsDate");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateLessThanOrEqualTo(Date value) {
		    addCriterion("last_exchange_points_date <=", value,
		            "lastExchangePointsDate");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateIn(List values) {
		    addCriterion("last_exchange_points_date in", values,
		            "lastExchangePointsDate");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateNotIn(List values) {
		    addCriterion("last_exchange_points_date not in", values,
		            "lastExchangePointsDate");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateBetween(Date value1,
	            Date value2) {
		    addCriterion("last_exchange_points_date between", value1, value2,
		            "lastExchangePointsDate");
		    return this;
	    }

	    public Criteria andLastExchangePointsDateNotBetween(Date value1,
	            Date value2) {
		    addCriterion("last_exchange_points_date not between", value1,
		            value2, "lastExchangePointsDate");
		    return this;
	    }
    }
}