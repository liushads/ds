package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventPlayerExample {

	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	public EventPlayerExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	protected EventPlayerExample(EventPlayerExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table event_player
	 * @abatorgenerated  Sun Mar 08 15:38:12 CST 2009
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List<Integer> values) {
			addCriterion("id in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List<Integer> values) {
			addCriterion("id not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return this;
		}

		public Criteria andEventIdIsNull() {
			addCriterion("event_id is null");
			return this;
		}

		public Criteria andEventIdIsNotNull() {
			addCriterion("event_id is not null");
			return this;
		}

		public Criteria andEventIdEqualTo(Integer value) {
			addCriterion("event_id =", value, "eventId");
			return this;
		}

		public Criteria andEventIdNotEqualTo(Integer value) {
			addCriterion("event_id <>", value, "eventId");
			return this;
		}

		public Criteria andEventIdGreaterThan(Integer value) {
			addCriterion("event_id >", value, "eventId");
			return this;
		}

		public Criteria andEventIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("event_id >=", value, "eventId");
			return this;
		}

		public Criteria andEventIdLessThan(Integer value) {
			addCriterion("event_id <", value, "eventId");
			return this;
		}

		public Criteria andEventIdLessThanOrEqualTo(Integer value) {
			addCriterion("event_id <=", value, "eventId");
			return this;
		}

		public Criteria andEventIdIn(List<Integer> values) {
			addCriterion("event_id in", values, "eventId");
			return this;
		}

		public Criteria andEventIdNotIn(List<Integer> values) {
			addCriterion("event_id not in", values, "eventId");
			return this;
		}

		public Criteria andEventIdBetween(Integer value1, Integer value2) {
			addCriterion("event_id between", value1, value2, "eventId");
			return this;
		}

		public Criteria andEventIdNotBetween(Integer value1, Integer value2) {
			addCriterion("event_id not between", value1, value2, "eventId");
			return this;
		}

		public Criteria andPropertyIsNull() {
			addCriterion("property is null");
			return this;
		}

		public Criteria andPropertyIsNotNull() {
			addCriterion("property is not null");
			return this;
		}

		public Criteria andPropertyEqualTo(Integer value) {
			addCriterion("property =", value, "property");
			return this;
		}

		public Criteria andPropertyNotEqualTo(Integer value) {
			addCriterion("property <>", value, "property");
			return this;
		}

		public Criteria andPropertyGreaterThan(Integer value) {
			addCriterion("property >", value, "property");
			return this;
		}

		public Criteria andPropertyGreaterThanOrEqualTo(Integer value) {
			addCriterion("property >=", value, "property");
			return this;
		}

		public Criteria andPropertyLessThan(Integer value) {
			addCriterion("property <", value, "property");
			return this;
		}

		public Criteria andPropertyLessThanOrEqualTo(Integer value) {
			addCriterion("property <=", value, "property");
			return this;
		}

		public Criteria andPropertyIn(List<Integer> values) {
			addCriterion("property in", values, "property");
			return this;
		}

		public Criteria andPropertyNotIn(List<Integer> values) {
			addCriterion("property not in", values, "property");
			return this;
		}

		public Criteria andPropertyBetween(Integer value1, Integer value2) {
			addCriterion("property between", value1, value2, "property");
			return this;
		}

		public Criteria andPropertyNotBetween(Integer value1, Integer value2) {
			addCriterion("property not between", value1, value2, "property");
			return this;
		}

		public Criteria andMinValueIsNull() {
			addCriterion("min_value is null");
			return this;
		}

		public Criteria andMinValueIsNotNull() {
			addCriterion("min_value is not null");
			return this;
		}

		public Criteria andMinValueEqualTo(Integer value) {
			addCriterion("min_value =", value, "minValue");
			return this;
		}

		public Criteria andMinValueNotEqualTo(Integer value) {
			addCriterion("min_value <>", value, "minValue");
			return this;
		}

		public Criteria andMinValueGreaterThan(Integer value) {
			addCriterion("min_value >", value, "minValue");
			return this;
		}

		public Criteria andMinValueGreaterThanOrEqualTo(Integer value) {
			addCriterion("min_value >=", value, "minValue");
			return this;
		}

		public Criteria andMinValueLessThan(Integer value) {
			addCriterion("min_value <", value, "minValue");
			return this;
		}

		public Criteria andMinValueLessThanOrEqualTo(Integer value) {
			addCriterion("min_value <=", value, "minValue");
			return this;
		}

		public Criteria andMinValueIn(List<Integer> values) {
			addCriterion("min_value in", values, "minValue");
			return this;
		}

		public Criteria andMinValueNotIn(List<Integer> values) {
			addCriterion("min_value not in", values, "minValue");
			return this;
		}

		public Criteria andMinValueBetween(Integer value1, Integer value2) {
			addCriterion("min_value between", value1, value2, "minValue");
			return this;
		}

		public Criteria andMinValueNotBetween(Integer value1, Integer value2) {
			addCriterion("min_value not between", value1, value2, "minValue");
			return this;
		}

		public Criteria andMaxValueIsNull() {
			addCriterion("max_value is null");
			return this;
		}

		public Criteria andMaxValueIsNotNull() {
			addCriterion("max_value is not null");
			return this;
		}

		public Criteria andMaxValueEqualTo(Integer value) {
			addCriterion("max_value =", value, "maxValue");
			return this;
		}

		public Criteria andMaxValueNotEqualTo(Integer value) {
			addCriterion("max_value <>", value, "maxValue");
			return this;
		}

		public Criteria andMaxValueGreaterThan(Integer value) {
			addCriterion("max_value >", value, "maxValue");
			return this;
		}

		public Criteria andMaxValueGreaterThanOrEqualTo(Integer value) {
			addCriterion("max_value >=", value, "maxValue");
			return this;
		}

		public Criteria andMaxValueLessThan(Integer value) {
			addCriterion("max_value <", value, "maxValue");
			return this;
		}

		public Criteria andMaxValueLessThanOrEqualTo(Integer value) {
			addCriterion("max_value <=", value, "maxValue");
			return this;
		}

		public Criteria andMaxValueIn(List<Integer> values) {
			addCriterion("max_value in", values, "maxValue");
			return this;
		}

		public Criteria andMaxValueNotIn(List<Integer> values) {
			addCriterion("max_value not in", values, "maxValue");
			return this;
		}

		public Criteria andMaxValueBetween(Integer value1, Integer value2) {
			addCriterion("max_value between", value1, value2, "maxValue");
			return this;
		}

		public Criteria andMaxValueNotBetween(Integer value1, Integer value2) {
			addCriterion("max_value not between", value1, value2, "maxValue");
			return this;
		}
	}
}