package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PlayerFriendExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	public PlayerFriendExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	protected PlayerFriendExample(PlayerFriendExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table player_friend
	 * @ibatorgenerated  Fri Apr 23 12:45:25 CST 2010
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List<Integer> values) {
			addCriterion("id in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List<Integer> values) {
			addCriterion("id not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return this;
		}

		public Criteria andPlayerIdIsNull() {
			addCriterion("player_id is null");
			return this;
		}

		public Criteria andPlayerIdIsNotNull() {
			addCriterion("player_id is not null");
			return this;
		}

		public Criteria andPlayerIdEqualTo(Integer value) {
			addCriterion("player_id =", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdNotEqualTo(Integer value) {
			addCriterion("player_id <>", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdGreaterThan(Integer value) {
			addCriterion("player_id >", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("player_id >=", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdLessThan(Integer value) {
			addCriterion("player_id <", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdLessThanOrEqualTo(Integer value) {
			addCriterion("player_id <=", value, "playerId");
			return this;
		}

		public Criteria andPlayerIdIn(List<Integer> values) {
			addCriterion("player_id in", values, "playerId");
			return this;
		}

		public Criteria andPlayerIdNotIn(List<Integer> values) {
			addCriterion("player_id not in", values, "playerId");
			return this;
		}

		public Criteria andPlayerIdBetween(Integer value1, Integer value2) {
			addCriterion("player_id between", value1, value2, "playerId");
			return this;
		}

		public Criteria andPlayerIdNotBetween(Integer value1, Integer value2) {
			addCriterion("player_id not between", value1, value2, "playerId");
			return this;
		}

		public Criteria andFriendIdIsNull() {
			addCriterion("friend_id is null");
			return this;
		}

		public Criteria andFriendIdIsNotNull() {
			addCriterion("friend_id is not null");
			return this;
		}

		public Criteria andFriendIdEqualTo(Integer value) {
			addCriterion("friend_id =", value, "friendId");
			return this;
		}

		public Criteria andFriendIdNotEqualTo(Integer value) {
			addCriterion("friend_id <>", value, "friendId");
			return this;
		}

		public Criteria andFriendIdGreaterThan(Integer value) {
			addCriterion("friend_id >", value, "friendId");
			return this;
		}

		public Criteria andFriendIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("friend_id >=", value, "friendId");
			return this;
		}

		public Criteria andFriendIdLessThan(Integer value) {
			addCriterion("friend_id <", value, "friendId");
			return this;
		}

		public Criteria andFriendIdLessThanOrEqualTo(Integer value) {
			addCriterion("friend_id <=", value, "friendId");
			return this;
		}

		public Criteria andFriendIdIn(List<Integer> values) {
			addCriterion("friend_id in", values, "friendId");
			return this;
		}

		public Criteria andFriendIdNotIn(List<Integer> values) {
			addCriterion("friend_id not in", values, "friendId");
			return this;
		}

		public Criteria andFriendIdBetween(Integer value1, Integer value2) {
			addCriterion("friend_id between", value1, value2, "friendId");
			return this;
		}

		public Criteria andFriendIdNotBetween(Integer value1, Integer value2) {
			addCriterion("friend_id not between", value1, value2, "friendId");
			return this;
		}

		public Criteria andStateIsNull() {
			addCriterion("state is null");
			return this;
		}

		public Criteria andStateIsNotNull() {
			addCriterion("state is not null");
			return this;
		}

		public Criteria andStateEqualTo(Byte value) {
			addCriterion("state =", value, "state");
			return this;
		}

		public Criteria andStateNotEqualTo(Byte value) {
			addCriterion("state <>", value, "state");
			return this;
		}

		public Criteria andStateGreaterThan(Byte value) {
			addCriterion("state >", value, "state");
			return this;
		}

		public Criteria andStateGreaterThanOrEqualTo(Byte value) {
			addCriterion("state >=", value, "state");
			return this;
		}

		public Criteria andStateLessThan(Byte value) {
			addCriterion("state <", value, "state");
			return this;
		}

		public Criteria andStateLessThanOrEqualTo(Byte value) {
			addCriterion("state <=", value, "state");
			return this;
		}

		public Criteria andStateIn(List<Byte> values) {
			addCriterion("state in", values, "state");
			return this;
		}

		public Criteria andStateNotIn(List<Byte> values) {
			addCriterion("state not in", values, "state");
			return this;
		}

		public Criteria andStateBetween(Byte value1, Byte value2) {
			addCriterion("state between", value1, value2, "state");
			return this;
		}

		public Criteria andStateNotBetween(Byte value1, Byte value2) {
			addCriterion("state not between", value1, value2, "state");
			return this;
		}

		public Criteria andNameIsNull() {
			addCriterion("name is null");
			return this;
		}

		public Criteria andNameIsNotNull() {
			addCriterion("name is not null");
			return this;
		}

		public Criteria andNameEqualTo(String value) {
			addCriterion("name =", value, "name");
			return this;
		}

		public Criteria andNameNotEqualTo(String value) {
			addCriterion("name <>", value, "name");
			return this;
		}

		public Criteria andNameGreaterThan(String value) {
			addCriterion("name >", value, "name");
			return this;
		}

		public Criteria andNameGreaterThanOrEqualTo(String value) {
			addCriterion("name >=", value, "name");
			return this;
		}

		public Criteria andNameLessThan(String value) {
			addCriterion("name <", value, "name");
			return this;
		}

		public Criteria andNameLessThanOrEqualTo(String value) {
			addCriterion("name <=", value, "name");
			return this;
		}

		public Criteria andNameLike(String value) {
			addCriterion("name like", value, "name");
			return this;
		}

		public Criteria andNameNotLike(String value) {
			addCriterion("name not like", value, "name");
			return this;
		}

		public Criteria andNameIn(List<String> values) {
			addCriterion("name in", values, "name");
			return this;
		}

		public Criteria andNameNotIn(List<String> values) {
			addCriterion("name not in", values, "name");
			return this;
		}

		public Criteria andNameBetween(String value1, String value2) {
			addCriterion("name between", value1, value2, "name");
			return this;
		}

		public Criteria andNameNotBetween(String value1, String value2) {
			addCriterion("name not between", value1, value2, "name");
			return this;
		}

		public Criteria andTypeIsNull() {
			addCriterion("type is null");
			return this;
		}

		public Criteria andTypeIsNotNull() {
			addCriterion("type is not null");
			return this;
		}

		public Criteria andTypeEqualTo(Integer value) {
			addCriterion("type =", value, "type");
			return this;
		}

		public Criteria andTypeNotEqualTo(Integer value) {
			addCriterion("type <>", value, "type");
			return this;
		}

		public Criteria andTypeGreaterThan(Integer value) {
			addCriterion("type >", value, "type");
			return this;
		}

		public Criteria andTypeGreaterThanOrEqualTo(Integer value) {
			addCriterion("type >=", value, "type");
			return this;
		}

		public Criteria andTypeLessThan(Integer value) {
			addCriterion("type <", value, "type");
			return this;
		}

		public Criteria andTypeLessThanOrEqualTo(Integer value) {
			addCriterion("type <=", value, "type");
			return this;
		}

		public Criteria andTypeIn(List<Integer> values) {
			addCriterion("type in", values, "type");
			return this;
		}

		public Criteria andTypeNotIn(List<Integer> values) {
			addCriterion("type not in", values, "type");
			return this;
		}

		public Criteria andTypeBetween(Integer value1, Integer value2) {
			addCriterion("type between", value1, value2, "type");
			return this;
		}

		public Criteria andTypeNotBetween(Integer value1, Integer value2) {
			addCriterion("type not between", value1, value2, "type");
			return this;
		}

		public Criteria andIntimateScoreIsNull() {
			addCriterion("intimate_score is null");
			return this;
		}

		public Criteria andIntimateScoreIsNotNull() {
			addCriterion("intimate_score is not null");
			return this;
		}

		public Criteria andIntimateScoreEqualTo(Integer value) {
			addCriterion("intimate_score =", value, "intimateScore");
			return this;
		}

		public Criteria andIntimateScoreNotEqualTo(Integer value) {
			addCriterion("intimate_score <>", value, "intimateScore");
			return this;
		}

		public Criteria andIntimateScoreGreaterThan(Integer value) {
			addCriterion("intimate_score >", value, "intimateScore");
			return this;
		}

		public Criteria andIntimateScoreGreaterThanOrEqualTo(Integer value) {
			addCriterion("intimate_score >=", value, "intimateScore");
			return this;
		}

		public Criteria andIntimateScoreLessThan(Integer value) {
			addCriterion("intimate_score <", value, "intimateScore");
			return this;
		}

		public Criteria andIntimateScoreLessThanOrEqualTo(Integer value) {
			addCriterion("intimate_score <=", value, "intimateScore");
			return this;
		}

		public Criteria andIntimateScoreIn(List<Integer> values) {
			addCriterion("intimate_score in", values, "intimateScore");
			return this;
		}

		public Criteria andIntimateScoreNotIn(List<Integer> values) {
			addCriterion("intimate_score not in", values, "intimateScore");
			return this;
		}

		public Criteria andIntimateScoreBetween(Integer value1, Integer value2) {
			addCriterion("intimate_score between", value1, value2,
					"intimateScore");
			return this;
		}

		public Criteria andIntimateScoreNotBetween(Integer value1,
				Integer value2) {
			addCriterion("intimate_score not between", value1, value2,
					"intimateScore");
			return this;
		}

		public Criteria andIsOppoSexIsNull() {
			addCriterion("is_oppo_sex is null");
			return this;
		}

		public Criteria andIsOppoSexIsNotNull() {
			addCriterion("is_oppo_sex is not null");
			return this;
		}

		public Criteria andIsOppoSexEqualTo(Integer value) {
			addCriterion("is_oppo_sex =", value, "isOppoSex");
			return this;
		}

		public Criteria andIsOppoSexNotEqualTo(Integer value) {
			addCriterion("is_oppo_sex <>", value, "isOppoSex");
			return this;
		}

		public Criteria andIsOppoSexGreaterThan(Integer value) {
			addCriterion("is_oppo_sex >", value, "isOppoSex");
			return this;
		}

		public Criteria andIsOppoSexGreaterThanOrEqualTo(Integer value) {
			addCriterion("is_oppo_sex >=", value, "isOppoSex");
			return this;
		}

		public Criteria andIsOppoSexLessThan(Integer value) {
			addCriterion("is_oppo_sex <", value, "isOppoSex");
			return this;
		}

		public Criteria andIsOppoSexLessThanOrEqualTo(Integer value) {
			addCriterion("is_oppo_sex <=", value, "isOppoSex");
			return this;
		}

		public Criteria andIsOppoSexIn(List<Integer> values) {
			addCriterion("is_oppo_sex in", values, "isOppoSex");
			return this;
		}

		public Criteria andIsOppoSexNotIn(List<Integer> values) {
			addCriterion("is_oppo_sex not in", values, "isOppoSex");
			return this;
		}

		public Criteria andIsOppoSexBetween(Integer value1, Integer value2) {
			addCriterion("is_oppo_sex between", value1, value2, "isOppoSex");
			return this;
		}

		public Criteria andIsOppoSexNotBetween(Integer value1, Integer value2) {
			addCriterion("is_oppo_sex not between", value1, value2, "isOppoSex");
			return this;
		}

		public Criteria andIsCongratulatedIsNull() {
			addCriterion("is_congratulated is null");
			return this;
		}

		public Criteria andIsCongratulatedIsNotNull() {
			addCriterion("is_congratulated is not null");
			return this;
		}

		public Criteria andIsCongratulatedEqualTo(Integer value) {
			addCriterion("is_congratulated =", value, "isCongratulated");
			return this;
		}

		public Criteria andIsCongratulatedNotEqualTo(Integer value) {
			addCriterion("is_congratulated <>", value, "isCongratulated");
			return this;
		}

		public Criteria andIsCongratulatedGreaterThan(Integer value) {
			addCriterion("is_congratulated >", value, "isCongratulated");
			return this;
		}

		public Criteria andIsCongratulatedGreaterThanOrEqualTo(Integer value) {
			addCriterion("is_congratulated >=", value, "isCongratulated");
			return this;
		}

		public Criteria andIsCongratulatedLessThan(Integer value) {
			addCriterion("is_congratulated <", value, "isCongratulated");
			return this;
		}

		public Criteria andIsCongratulatedLessThanOrEqualTo(Integer value) {
			addCriterion("is_congratulated <=", value, "isCongratulated");
			return this;
		}

		public Criteria andIsCongratulatedIn(List<Integer> values) {
			addCriterion("is_congratulated in", values, "isCongratulated");
			return this;
		}

		public Criteria andIsCongratulatedNotIn(List<Integer> values) {
			addCriterion("is_congratulated not in", values, "isCongratulated");
			return this;
		}

		public Criteria andIsCongratulatedBetween(Integer value1, Integer value2) {
			addCriterion("is_congratulated between", value1, value2,
					"isCongratulated");
			return this;
		}

		public Criteria andIsCongratulatedNotBetween(Integer value1,
				Integer value2) {
			addCriterion("is_congratulated not between", value1, value2,
					"isCongratulated");
			return this;
		}
	}
}