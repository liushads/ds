package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Date;

public class CityTongExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	public CityTongExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	protected CityTongExample(CityTongExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table city_tong
	 * @ibatorgenerated  Wed May 12 14:13:13 CST 2010
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List<Integer> values) {
			addCriterion("id in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List<Integer> values) {
			addCriterion("id not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return this;
		}

		public Criteria andCityIdIsNull() {
			addCriterion("city_id is null");
			return this;
		}

		public Criteria andCityIdIsNotNull() {
			addCriterion("city_id is not null");
			return this;
		}

		public Criteria andCityIdEqualTo(Integer value) {
			addCriterion("city_id =", value, "cityId");
			return this;
		}

		public Criteria andCityIdNotEqualTo(Integer value) {
			addCriterion("city_id <>", value, "cityId");
			return this;
		}

		public Criteria andCityIdGreaterThan(Integer value) {
			addCriterion("city_id >", value, "cityId");
			return this;
		}

		public Criteria andCityIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("city_id >=", value, "cityId");
			return this;
		}

		public Criteria andCityIdLessThan(Integer value) {
			addCriterion("city_id <", value, "cityId");
			return this;
		}

		public Criteria andCityIdLessThanOrEqualTo(Integer value) {
			addCriterion("city_id <=", value, "cityId");
			return this;
		}

		public Criteria andCityIdIn(List<Integer> values) {
			addCriterion("city_id in", values, "cityId");
			return this;
		}

		public Criteria andCityIdNotIn(List<Integer> values) {
			addCriterion("city_id not in", values, "cityId");
			return this;
		}

		public Criteria andCityIdBetween(Integer value1, Integer value2) {
			addCriterion("city_id between", value1, value2, "cityId");
			return this;
		}

		public Criteria andCityIdNotBetween(Integer value1, Integer value2) {
			addCriterion("city_id not between", value1, value2, "cityId");
			return this;
		}

		public Criteria andTongIdIsNull() {
			addCriterion("tong_id is null");
			return this;
		}

		public Criteria andTongIdIsNotNull() {
			addCriterion("tong_id is not null");
			return this;
		}

		public Criteria andTongIdEqualTo(Integer value) {
			addCriterion("tong_id =", value, "tongId");
			return this;
		}

		public Criteria andTongIdNotEqualTo(Integer value) {
			addCriterion("tong_id <>", value, "tongId");
			return this;
		}

		public Criteria andTongIdGreaterThan(Integer value) {
			addCriterion("tong_id >", value, "tongId");
			return this;
		}

		public Criteria andTongIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("tong_id >=", value, "tongId");
			return this;
		}

		public Criteria andTongIdLessThan(Integer value) {
			addCriterion("tong_id <", value, "tongId");
			return this;
		}

		public Criteria andTongIdLessThanOrEqualTo(Integer value) {
			addCriterion("tong_id <=", value, "tongId");
			return this;
		}

		public Criteria andTongIdIn(List<Integer> values) {
			addCriterion("tong_id in", values, "tongId");
			return this;
		}

		public Criteria andTongIdNotIn(List<Integer> values) {
			addCriterion("tong_id not in", values, "tongId");
			return this;
		}

		public Criteria andTongIdBetween(Integer value1, Integer value2) {
			addCriterion("tong_id between", value1, value2, "tongId");
			return this;
		}

		public Criteria andTongIdNotBetween(Integer value1, Integer value2) {
			addCriterion("tong_id not between", value1, value2, "tongId");
			return this;
		}

		public Criteria andLastAktTimeIsNull() {
			addCriterion("last_akt_time is null");
			return this;
		}

		public Criteria andLastAktTimeIsNotNull() {
			addCriterion("last_akt_time is not null");
			return this;
		}

		public Criteria andLastAktTimeEqualTo(Integer value) {
			addCriterion("last_akt_time =", value, "lastAktTime");
			return this;
		}

		public Criteria andLastAktTimeNotEqualTo(Integer value) {
			addCriterion("last_akt_time <>", value, "lastAktTime");
			return this;
		}

		public Criteria andLastAktTimeGreaterThan(Integer value) {
			addCriterion("last_akt_time >", value, "lastAktTime");
			return this;
		}

		public Criteria andLastAktTimeGreaterThanOrEqualTo(Integer value) {
			addCriterion("last_akt_time >=", value, "lastAktTime");
			return this;
		}

		public Criteria andLastAktTimeLessThan(Integer value) {
			addCriterion("last_akt_time <", value, "lastAktTime");
			return this;
		}

		public Criteria andLastAktTimeLessThanOrEqualTo(Integer value) {
			addCriterion("last_akt_time <=", value, "lastAktTime");
			return this;
		}

		public Criteria andLastAktTimeIn(List<Integer> values) {
			addCriterion("last_akt_time in", values, "lastAktTime");
			return this;
		}

		public Criteria andLastAktTimeNotIn(List<Integer> values) {
			addCriterion("last_akt_time not in", values, "lastAktTime");
			return this;
		}

		public Criteria andLastAktTimeBetween(Integer value1, Integer value2) {
			addCriterion("last_akt_time between", value1, value2, "lastAktTime");
			return this;
		}

		public Criteria andLastAktTimeNotBetween(Integer value1, Integer value2) {
			addCriterion("last_akt_time not between", value1, value2,
					"lastAktTime");
			return this;
		}
	}
}