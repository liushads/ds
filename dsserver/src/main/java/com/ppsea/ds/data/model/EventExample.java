package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class EventExample {

	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Abator for iBATIS. This field corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	protected List<Criteria> oredCriteria;

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	public EventExample() {
		oredCriteria = new ArrayList<Criteria>();
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	protected EventExample(EventExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	public List<Criteria> getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Abator for iBATIS. This method corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Abator for iBATIS. This class corresponds to the database table event
	 * @abatorgenerated  Mon Mar 23 22:35:44 CST 2009
	 */
	public static class Criteria {
		protected List<String> criteriaWithoutValue;
		protected List<Map<String, Object>> criteriaWithSingleValue;
		protected List<Map<String, Object>> criteriaWithListValue;
		protected List<Map<String, Object>> criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList<String>();
			criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
			criteriaWithListValue = new ArrayList<Map<String, Object>>();
			criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List<String> getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List<Map<String, Object>> getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List<Map<String, Object>> getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List<Map<String, Object>> getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition,
				List<? extends Object> values, String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List<Object> list = new ArrayList<Object>();
			list.add(value1);
			list.add(value2);
			Map<String, Object> map = new HashMap<String, Object>();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List<Integer> values) {
			addCriterion("id in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List<Integer> values) {
			addCriterion("id not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return this;
		}

		public Criteria andNameIsNull() {
			addCriterion("name is null");
			return this;
		}

		public Criteria andNameIsNotNull() {
			addCriterion("name is not null");
			return this;
		}

		public Criteria andNameEqualTo(String value) {
			addCriterion("name =", value, "name");
			return this;
		}

		public Criteria andNameNotEqualTo(String value) {
			addCriterion("name <>", value, "name");
			return this;
		}

		public Criteria andNameGreaterThan(String value) {
			addCriterion("name >", value, "name");
			return this;
		}

		public Criteria andNameGreaterThanOrEqualTo(String value) {
			addCriterion("name >=", value, "name");
			return this;
		}

		public Criteria andNameLessThan(String value) {
			addCriterion("name <", value, "name");
			return this;
		}

		public Criteria andNameLessThanOrEqualTo(String value) {
			addCriterion("name <=", value, "name");
			return this;
		}

		public Criteria andNameLike(String value) {
			addCriterion("name like", value, "name");
			return this;
		}

		public Criteria andNameNotLike(String value) {
			addCriterion("name not like", value, "name");
			return this;
		}

		public Criteria andNameIn(List<String> values) {
			addCriterion("name in", values, "name");
			return this;
		}

		public Criteria andNameNotIn(List<String> values) {
			addCriterion("name not in", values, "name");
			return this;
		}

		public Criteria andNameBetween(String value1, String value2) {
			addCriterion("name between", value1, value2, "name");
			return this;
		}

		public Criteria andNameNotBetween(String value1, String value2) {
			addCriterion("name not between", value1, value2, "name");
			return this;
		}

		public Criteria andTypeIsNull() {
			addCriterion("type is null");
			return this;
		}

		public Criteria andTypeIsNotNull() {
			addCriterion("type is not null");
			return this;
		}

		public Criteria andTypeEqualTo(Integer value) {
			addCriterion("type =", value, "type");
			return this;
		}

		public Criteria andTypeNotEqualTo(Integer value) {
			addCriterion("type <>", value, "type");
			return this;
		}

		public Criteria andTypeGreaterThan(Integer value) {
			addCriterion("type >", value, "type");
			return this;
		}

		public Criteria andTypeGreaterThanOrEqualTo(Integer value) {
			addCriterion("type >=", value, "type");
			return this;
		}

		public Criteria andTypeLessThan(Integer value) {
			addCriterion("type <", value, "type");
			return this;
		}

		public Criteria andTypeLessThanOrEqualTo(Integer value) {
			addCriterion("type <=", value, "type");
			return this;
		}

		public Criteria andTypeIn(List<Integer> values) {
			addCriterion("type in", values, "type");
			return this;
		}

		public Criteria andTypeNotIn(List<Integer> values) {
			addCriterion("type not in", values, "type");
			return this;
		}

		public Criteria andTypeBetween(Integer value1, Integer value2) {
			addCriterion("type between", value1, value2, "type");
			return this;
		}

		public Criteria andTypeNotBetween(Integer value1, Integer value2) {
			addCriterion("type not between", value1, value2, "type");
			return this;
		}

		public Criteria andProbabilityIsNull() {
			addCriterion("probability is null");
			return this;
		}

		public Criteria andProbabilityIsNotNull() {
			addCriterion("probability is not null");
			return this;
		}

		public Criteria andProbabilityEqualTo(Integer value) {
			addCriterion("probability =", value, "probability");
			return this;
		}

		public Criteria andProbabilityNotEqualTo(Integer value) {
			addCriterion("probability <>", value, "probability");
			return this;
		}

		public Criteria andProbabilityGreaterThan(Integer value) {
			addCriterion("probability >", value, "probability");
			return this;
		}

		public Criteria andProbabilityGreaterThanOrEqualTo(Integer value) {
			addCriterion("probability >=", value, "probability");
			return this;
		}

		public Criteria andProbabilityLessThan(Integer value) {
			addCriterion("probability <", value, "probability");
			return this;
		}

		public Criteria andProbabilityLessThanOrEqualTo(Integer value) {
			addCriterion("probability <=", value, "probability");
			return this;
		}

		public Criteria andProbabilityIn(List<Integer> values) {
			addCriterion("probability in", values, "probability");
			return this;
		}

		public Criteria andProbabilityNotIn(List<Integer> values) {
			addCriterion("probability not in", values, "probability");
			return this;
		}

		public Criteria andProbabilityBetween(Integer value1, Integer value2) {
			addCriterion("probability between", value1, value2, "probability");
			return this;
		}

		public Criteria andProbabilityNotBetween(Integer value1, Integer value2) {
			addCriterion("probability not between", value1, value2,
					"probability");
			return this;
		}

		public Criteria andDescriptionIsNull() {
			addCriterion("description is null");
			return this;
		}

		public Criteria andDescriptionIsNotNull() {
			addCriterion("description is not null");
			return this;
		}

		public Criteria andDescriptionEqualTo(String value) {
			addCriterion("description =", value, "description");
			return this;
		}

		public Criteria andDescriptionNotEqualTo(String value) {
			addCriterion("description <>", value, "description");
			return this;
		}

		public Criteria andDescriptionGreaterThan(String value) {
			addCriterion("description >", value, "description");
			return this;
		}

		public Criteria andDescriptionGreaterThanOrEqualTo(String value) {
			addCriterion("description >=", value, "description");
			return this;
		}

		public Criteria andDescriptionLessThan(String value) {
			addCriterion("description <", value, "description");
			return this;
		}

		public Criteria andDescriptionLessThanOrEqualTo(String value) {
			addCriterion("description <=", value, "description");
			return this;
		}

		public Criteria andDescriptionLike(String value) {
			addCriterion("description like", value, "description");
			return this;
		}

		public Criteria andDescriptionNotLike(String value) {
			addCriterion("description not like", value, "description");
			return this;
		}

		public Criteria andDescriptionIn(List<String> values) {
			addCriterion("description in", values, "description");
			return this;
		}

		public Criteria andDescriptionNotIn(List<String> values) {
			addCriterion("description not in", values, "description");
			return this;
		}

		public Criteria andDescriptionBetween(String value1, String value2) {
			addCriterion("description between", value1, value2, "description");
			return this;
		}

		public Criteria andDescriptionNotBetween(String value1, String value2) {
			addCriterion("description not between", value1, value2,
					"description");
			return this;
		}

		public Criteria andCityfacilityIdIsNull() {
			addCriterion("cityfacility_id is null");
			return this;
		}

		public Criteria andCityfacilityIdIsNotNull() {
			addCriterion("cityfacility_id is not null");
			return this;
		}

		public Criteria andCityfacilityIdEqualTo(Integer value) {
			addCriterion("cityfacility_id =", value, "cityfacilityId");
			return this;
		}

		public Criteria andCityfacilityIdNotEqualTo(Integer value) {
			addCriterion("cityfacility_id <>", value, "cityfacilityId");
			return this;
		}

		public Criteria andCityfacilityIdGreaterThan(Integer value) {
			addCriterion("cityfacility_id >", value, "cityfacilityId");
			return this;
		}

		public Criteria andCityfacilityIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("cityfacility_id >=", value, "cityfacilityId");
			return this;
		}

		public Criteria andCityfacilityIdLessThan(Integer value) {
			addCriterion("cityfacility_id <", value, "cityfacilityId");
			return this;
		}

		public Criteria andCityfacilityIdLessThanOrEqualTo(Integer value) {
			addCriterion("cityfacility_id <=", value, "cityfacilityId");
			return this;
		}

		public Criteria andCityfacilityIdIn(List<Integer> values) {
			addCriterion("cityfacility_id in", values, "cityfacilityId");
			return this;
		}

		public Criteria andCityfacilityIdNotIn(List<Integer> values) {
			addCriterion("cityfacility_id not in", values, "cityfacilityId");
			return this;
		}

		public Criteria andCityfacilityIdBetween(Integer value1, Integer value2) {
			addCriterion("cityfacility_id between", value1, value2,
					"cityfacilityId");
			return this;
		}

		public Criteria andCityfacilityIdNotBetween(Integer value1,
				Integer value2) {
			addCriterion("cityfacility_id not between", value1, value2,
					"cityfacilityId");
			return this;
		}

		public Criteria andOmitIsNull() {
			addCriterion("omit is null");
			return this;
		}

		public Criteria andOmitIsNotNull() {
			addCriterion("omit is not null");
			return this;
		}

		public Criteria andOmitEqualTo(Boolean value) {
			addCriterion("omit =", value, "omit");
			return this;
		}

		public Criteria andOmitNotEqualTo(Boolean value) {
			addCriterion("omit <>", value, "omit");
			return this;
		}

		public Criteria andOmitGreaterThan(Boolean value) {
			addCriterion("omit >", value, "omit");
			return this;
		}

		public Criteria andOmitGreaterThanOrEqualTo(Boolean value) {
			addCriterion("omit >=", value, "omit");
			return this;
		}

		public Criteria andOmitLessThan(Boolean value) {
			addCriterion("omit <", value, "omit");
			return this;
		}

		public Criteria andOmitLessThanOrEqualTo(Boolean value) {
			addCriterion("omit <=", value, "omit");
			return this;
		}

		public Criteria andOmitIn(List<Boolean> values) {
			addCriterion("omit in", values, "omit");
			return this;
		}

		public Criteria andOmitNotIn(List<Boolean> values) {
			addCriterion("omit not in", values, "omit");
			return this;
		}

		public Criteria andOmitBetween(Boolean value1, Boolean value2) {
			addCriterion("omit between", value1, value2, "omit");
			return this;
		}

		public Criteria andOmitNotBetween(Boolean value1, Boolean value2) {
			addCriterion("omit not between", value1, value2, "omit");
			return this;
		}

		public Criteria andIconIsNull() {
			addCriterion("icon is null");
			return this;
		}

		public Criteria andIconIsNotNull() {
			addCriterion("icon is not null");
			return this;
		}

		public Criteria andIconEqualTo(String value) {
			addCriterion("icon =", value, "icon");
			return this;
		}

		public Criteria andIconNotEqualTo(String value) {
			addCriterion("icon <>", value, "icon");
			return this;
		}

		public Criteria andIconGreaterThan(String value) {
			addCriterion("icon >", value, "icon");
			return this;
		}

		public Criteria andIconGreaterThanOrEqualTo(String value) {
			addCriterion("icon >=", value, "icon");
			return this;
		}

		public Criteria andIconLessThan(String value) {
			addCriterion("icon <", value, "icon");
			return this;
		}

		public Criteria andIconLessThanOrEqualTo(String value) {
			addCriterion("icon <=", value, "icon");
			return this;
		}

		public Criteria andIconLike(String value) {
			addCriterion("icon like", value, "icon");
			return this;
		}

		public Criteria andIconNotLike(String value) {
			addCriterion("icon not like", value, "icon");
			return this;
		}

		public Criteria andIconIn(List<String> values) {
			addCriterion("icon in", values, "icon");
			return this;
		}

		public Criteria andIconNotIn(List<String> values) {
			addCriterion("icon not in", values, "icon");
			return this;
		}

		public Criteria andIconBetween(String value1, String value2) {
			addCriterion("icon between", value1, value2, "icon");
			return this;
		}

		public Criteria andIconNotBetween(String value1, String value2) {
			addCriterion("icon not between", value1, value2, "icon");
			return this;
		}

		public Criteria andWalkAliasIsNull() {
			addCriterion("walk_alias is null");
			return this;
		}

		public Criteria andWalkAliasIsNotNull() {
			addCriterion("walk_alias is not null");
			return this;
		}

		public Criteria andWalkAliasEqualTo(String value) {
			addCriterion("walk_alias =", value, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasNotEqualTo(String value) {
			addCriterion("walk_alias <>", value, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasGreaterThan(String value) {
			addCriterion("walk_alias >", value, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasGreaterThanOrEqualTo(String value) {
			addCriterion("walk_alias >=", value, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasLessThan(String value) {
			addCriterion("walk_alias <", value, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasLessThanOrEqualTo(String value) {
			addCriterion("walk_alias <=", value, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasLike(String value) {
			addCriterion("walk_alias like", value, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasNotLike(String value) {
			addCriterion("walk_alias not like", value, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasIn(List<String> values) {
			addCriterion("walk_alias in", values, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasNotIn(List<String> values) {
			addCriterion("walk_alias not in", values, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasBetween(String value1, String value2) {
			addCriterion("walk_alias between", value1, value2, "walkAlias");
			return this;
		}

		public Criteria andWalkAliasNotBetween(String value1, String value2) {
			addCriterion("walk_alias not between", value1, value2, "walkAlias");
			return this;
		}
	}
}