package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CityFacilityMonsterExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    protected List<Criteria> oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    public CityFacilityMonsterExample() {
        oredCriteria = new ArrayList<Criteria>();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    protected CityFacilityMonsterExample(CityFacilityMonsterExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    public List<Criteria> getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table city_facility_monster
     *
     * @ibatorgenerated Sat Apr 24 15:33:47 CST 2010
     */
    public static class Criteria {
        protected List<String> criteriaWithoutValue;

        protected List<Map<String, Object>> criteriaWithSingleValue;

        protected List<Map<String, Object>> criteriaWithListValue;

        protected List<Map<String, Object>> criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList<String>();
            criteriaWithSingleValue = new ArrayList<Map<String, Object>>();
            criteriaWithListValue = new ArrayList<Map<String, Object>>();
            criteriaWithBetweenValue = new ArrayList<Map<String, Object>>();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List<String> getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List<Map<String, Object>> getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List<Map<String, Object>> getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List<Map<String, Object>> getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List<? extends Object> values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List<Object> list = new ArrayList<Object>();
            list.add(value1);
            list.add(value2);
            Map<String, Object> map = new HashMap<String, Object>();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List<Integer> values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List<Integer> values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andCityFacilityIdIsNull() {
            addCriterion("city_facility_id is null");
            return this;
        }

        public Criteria andCityFacilityIdIsNotNull() {
            addCriterion("city_facility_id is not null");
            return this;
        }

        public Criteria andCityFacilityIdEqualTo(Integer value) {
            addCriterion("city_facility_id =", value, "cityFacilityId");
            return this;
        }

        public Criteria andCityFacilityIdNotEqualTo(Integer value) {
            addCriterion("city_facility_id <>", value, "cityFacilityId");
            return this;
        }

        public Criteria andCityFacilityIdGreaterThan(Integer value) {
            addCriterion("city_facility_id >", value, "cityFacilityId");
            return this;
        }

        public Criteria andCityFacilityIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("city_facility_id >=", value, "cityFacilityId");
            return this;
        }

        public Criteria andCityFacilityIdLessThan(Integer value) {
            addCriterion("city_facility_id <", value, "cityFacilityId");
            return this;
        }

        public Criteria andCityFacilityIdLessThanOrEqualTo(Integer value) {
            addCriterion("city_facility_id <=", value, "cityFacilityId");
            return this;
        }

        public Criteria andCityFacilityIdIn(List<Integer> values) {
            addCriterion("city_facility_id in", values, "cityFacilityId");
            return this;
        }

        public Criteria andCityFacilityIdNotIn(List<Integer> values) {
            addCriterion("city_facility_id not in", values, "cityFacilityId");
            return this;
        }

        public Criteria andCityFacilityIdBetween(Integer value1, Integer value2) {
            addCriterion("city_facility_id between", value1, value2, "cityFacilityId");
            return this;
        }

        public Criteria andCityFacilityIdNotBetween(Integer value1, Integer value2) {
            addCriterion("city_facility_id not between", value1, value2, "cityFacilityId");
            return this;
        }

        public Criteria andMonsterIdIsNull() {
            addCriterion("monster_id is null");
            return this;
        }

        public Criteria andMonsterIdIsNotNull() {
            addCriterion("monster_id is not null");
            return this;
        }

        public Criteria andMonsterIdEqualTo(Integer value) {
            addCriterion("monster_id =", value, "monsterId");
            return this;
        }

        public Criteria andMonsterIdNotEqualTo(Integer value) {
            addCriterion("monster_id <>", value, "monsterId");
            return this;
        }

        public Criteria andMonsterIdGreaterThan(Integer value) {
            addCriterion("monster_id >", value, "monsterId");
            return this;
        }

        public Criteria andMonsterIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("monster_id >=", value, "monsterId");
            return this;
        }

        public Criteria andMonsterIdLessThan(Integer value) {
            addCriterion("monster_id <", value, "monsterId");
            return this;
        }

        public Criteria andMonsterIdLessThanOrEqualTo(Integer value) {
            addCriterion("monster_id <=", value, "monsterId");
            return this;
        }

        public Criteria andMonsterIdIn(List<Integer> values) {
            addCriterion("monster_id in", values, "monsterId");
            return this;
        }

        public Criteria andMonsterIdNotIn(List<Integer> values) {
            addCriterion("monster_id not in", values, "monsterId");
            return this;
        }

        public Criteria andMonsterIdBetween(Integer value1, Integer value2) {
            addCriterion("monster_id between", value1, value2, "monsterId");
            return this;
        }

        public Criteria andMonsterIdNotBetween(Integer value1, Integer value2) {
            addCriterion("monster_id not between", value1, value2, "monsterId");
            return this;
        }

        public Criteria andMaxCountIsNull() {
            addCriterion("max_count is null");
            return this;
        }

        public Criteria andMaxCountIsNotNull() {
            addCriterion("max_count is not null");
            return this;
        }

        public Criteria andMaxCountEqualTo(Integer value) {
            addCriterion("max_count =", value, "maxCount");
            return this;
        }

        public Criteria andMaxCountNotEqualTo(Integer value) {
            addCriterion("max_count <>", value, "maxCount");
            return this;
        }

        public Criteria andMaxCountGreaterThan(Integer value) {
            addCriterion("max_count >", value, "maxCount");
            return this;
        }

        public Criteria andMaxCountGreaterThanOrEqualTo(Integer value) {
            addCriterion("max_count >=", value, "maxCount");
            return this;
        }

        public Criteria andMaxCountLessThan(Integer value) {
            addCriterion("max_count <", value, "maxCount");
            return this;
        }

        public Criteria andMaxCountLessThanOrEqualTo(Integer value) {
            addCriterion("max_count <=", value, "maxCount");
            return this;
        }

        public Criteria andMaxCountIn(List<Integer> values) {
            addCriterion("max_count in", values, "maxCount");
            return this;
        }

        public Criteria andMaxCountNotIn(List<Integer> values) {
            addCriterion("max_count not in", values, "maxCount");
            return this;
        }

        public Criteria andMaxCountBetween(Integer value1, Integer value2) {
            addCriterion("max_count between", value1, value2, "maxCount");
            return this;
        }

        public Criteria andMaxCountNotBetween(Integer value1, Integer value2) {
            addCriterion("max_count not between", value1, value2, "maxCount");
            return this;
        }

        public Criteria andSharedIsNull() {
            addCriterion("shared is null");
            return this;
        }

        public Criteria andSharedIsNotNull() {
            addCriterion("shared is not null");
            return this;
        }

        public Criteria andSharedEqualTo(Integer value) {
            addCriterion("shared =", value, "shared");
            return this;
        }

        public Criteria andSharedNotEqualTo(Integer value) {
            addCriterion("shared <>", value, "shared");
            return this;
        }

        public Criteria andSharedGreaterThan(Integer value) {
            addCriterion("shared >", value, "shared");
            return this;
        }

        public Criteria andSharedGreaterThanOrEqualTo(Integer value) {
            addCriterion("shared >=", value, "shared");
            return this;
        }

        public Criteria andSharedLessThan(Integer value) {
            addCriterion("shared <", value, "shared");
            return this;
        }

        public Criteria andSharedLessThanOrEqualTo(Integer value) {
            addCriterion("shared <=", value, "shared");
            return this;
        }

        public Criteria andSharedIn(List<Integer> values) {
            addCriterion("shared in", values, "shared");
            return this;
        }

        public Criteria andSharedNotIn(List<Integer> values) {
            addCriterion("shared not in", values, "shared");
            return this;
        }

        public Criteria andSharedBetween(Integer value1, Integer value2) {
            addCriterion("shared between", value1, value2, "shared");
            return this;
        }

        public Criteria andSharedNotBetween(Integer value1, Integer value2) {
            addCriterion("shared not between", value1, value2, "shared");
            return this;
        }

        public Criteria andShowupProbIsNull() {
            addCriterion("showup_prob is null");
            return this;
        }

        public Criteria andShowupProbIsNotNull() {
            addCriterion("showup_prob is not null");
            return this;
        }

        public Criteria andShowupProbEqualTo(Integer value) {
            addCriterion("showup_prob =", value, "showupProb");
            return this;
        }

        public Criteria andShowupProbNotEqualTo(Integer value) {
            addCriterion("showup_prob <>", value, "showupProb");
            return this;
        }

        public Criteria andShowupProbGreaterThan(Integer value) {
            addCriterion("showup_prob >", value, "showupProb");
            return this;
        }

        public Criteria andShowupProbGreaterThanOrEqualTo(Integer value) {
            addCriterion("showup_prob >=", value, "showupProb");
            return this;
        }

        public Criteria andShowupProbLessThan(Integer value) {
            addCriterion("showup_prob <", value, "showupProb");
            return this;
        }

        public Criteria andShowupProbLessThanOrEqualTo(Integer value) {
            addCriterion("showup_prob <=", value, "showupProb");
            return this;
        }

        public Criteria andShowupProbIn(List<Integer> values) {
            addCriterion("showup_prob in", values, "showupProb");
            return this;
        }

        public Criteria andShowupProbNotIn(List<Integer> values) {
            addCriterion("showup_prob not in", values, "showupProb");
            return this;
        }

        public Criteria andShowupProbBetween(Integer value1, Integer value2) {
            addCriterion("showup_prob between", value1, value2, "showupProb");
            return this;
        }

        public Criteria andShowupProbNotBetween(Integer value1, Integer value2) {
            addCriterion("showup_prob not between", value1, value2, "showupProb");
            return this;
        }

        public Criteria andAttackProbIsNull() {
            addCriterion("attack_prob is null");
            return this;
        }

        public Criteria andAttackProbIsNotNull() {
            addCriterion("attack_prob is not null");
            return this;
        }

        public Criteria andAttackProbEqualTo(Integer value) {
            addCriterion("attack_prob =", value, "attackProb");
            return this;
        }

        public Criteria andAttackProbNotEqualTo(Integer value) {
            addCriterion("attack_prob <>", value, "attackProb");
            return this;
        }

        public Criteria andAttackProbGreaterThan(Integer value) {
            addCriterion("attack_prob >", value, "attackProb");
            return this;
        }

        public Criteria andAttackProbGreaterThanOrEqualTo(Integer value) {
            addCriterion("attack_prob >=", value, "attackProb");
            return this;
        }

        public Criteria andAttackProbLessThan(Integer value) {
            addCriterion("attack_prob <", value, "attackProb");
            return this;
        }

        public Criteria andAttackProbLessThanOrEqualTo(Integer value) {
            addCriterion("attack_prob <=", value, "attackProb");
            return this;
        }

        public Criteria andAttackProbIn(List<Integer> values) {
            addCriterion("attack_prob in", values, "attackProb");
            return this;
        }

        public Criteria andAttackProbNotIn(List<Integer> values) {
            addCriterion("attack_prob not in", values, "attackProb");
            return this;
        }

        public Criteria andAttackProbBetween(Integer value1, Integer value2) {
            addCriterion("attack_prob between", value1, value2, "attackProb");
            return this;
        }

        public Criteria andAttackProbNotBetween(Integer value1, Integer value2) {
            addCriterion("attack_prob not between", value1, value2, "attackProb");
            return this;
        }

        public Criteria andNoDisappearIsNull() {
            addCriterion("no_disappear is null");
            return this;
        }

        public Criteria andNoDisappearIsNotNull() {
            addCriterion("no_disappear is not null");
            return this;
        }

        public Criteria andNoDisappearEqualTo(Integer value) {
            addCriterion("no_disappear =", value, "noDisappear");
            return this;
        }

        public Criteria andNoDisappearNotEqualTo(Integer value) {
            addCriterion("no_disappear <>", value, "noDisappear");
            return this;
        }

        public Criteria andNoDisappearGreaterThan(Integer value) {
            addCriterion("no_disappear >", value, "noDisappear");
            return this;
        }

        public Criteria andNoDisappearGreaterThanOrEqualTo(Integer value) {
            addCriterion("no_disappear >=", value, "noDisappear");
            return this;
        }

        public Criteria andNoDisappearLessThan(Integer value) {
            addCriterion("no_disappear <", value, "noDisappear");
            return this;
        }

        public Criteria andNoDisappearLessThanOrEqualTo(Integer value) {
            addCriterion("no_disappear <=", value, "noDisappear");
            return this;
        }

        public Criteria andNoDisappearIn(List<Integer> values) {
            addCriterion("no_disappear in", values, "noDisappear");
            return this;
        }

        public Criteria andNoDisappearNotIn(List<Integer> values) {
            addCriterion("no_disappear not in", values, "noDisappear");
            return this;
        }

        public Criteria andNoDisappearBetween(Integer value1, Integer value2) {
            addCriterion("no_disappear between", value1, value2, "noDisappear");
            return this;
        }

        public Criteria andNoDisappearNotBetween(Integer value1, Integer value2) {
            addCriterion("no_disappear not between", value1, value2, "noDisappear");
            return this;
        }
    }
}