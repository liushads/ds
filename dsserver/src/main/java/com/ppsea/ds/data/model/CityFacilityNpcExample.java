package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class CityFacilityNpcExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    public CityFacilityNpcExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    protected CityFacilityNpcExample(CityFacilityNpcExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table city_facility_npc
     *
     * @ibatorgenerated Tue Apr 06 13:45:19 CST 2010
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andCityfacilityIdIsNull() {
            addCriterion("cityfacility_id is null");
            return this;
        }

        public Criteria andCityfacilityIdIsNotNull() {
            addCriterion("cityfacility_id is not null");
            return this;
        }

        public Criteria andCityfacilityIdEqualTo(Integer value) {
            addCriterion("cityfacility_id =", value, "cityfacilityId");
            return this;
        }

        public Criteria andCityfacilityIdNotEqualTo(Integer value) {
            addCriterion("cityfacility_id <>", value, "cityfacilityId");
            return this;
        }

        public Criteria andCityfacilityIdGreaterThan(Integer value) {
            addCriterion("cityfacility_id >", value, "cityfacilityId");
            return this;
        }

        public Criteria andCityfacilityIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("cityfacility_id >=", value, "cityfacilityId");
            return this;
        }

        public Criteria andCityfacilityIdLessThan(Integer value) {
            addCriterion("cityfacility_id <", value, "cityfacilityId");
            return this;
        }

        public Criteria andCityfacilityIdLessThanOrEqualTo(Integer value) {
            addCriterion("cityfacility_id <=", value, "cityfacilityId");
            return this;
        }

        public Criteria andCityfacilityIdIn(List values) {
            addCriterion("cityfacility_id in", values, "cityfacilityId");
            return this;
        }

        public Criteria andCityfacilityIdNotIn(List values) {
            addCriterion("cityfacility_id not in", values, "cityfacilityId");
            return this;
        }

        public Criteria andCityfacilityIdBetween(Integer value1, Integer value2) {
            addCriterion("cityfacility_id between", value1, value2, "cityfacilityId");
            return this;
        }

        public Criteria andCityfacilityIdNotBetween(Integer value1, Integer value2) {
            addCriterion("cityfacility_id not between", value1, value2, "cityfacilityId");
            return this;
        }

        public Criteria andNpcIdIsNull() {
            addCriterion("npc_id is null");
            return this;
        }

        public Criteria andNpcIdIsNotNull() {
            addCriterion("npc_id is not null");
            return this;
        }

        public Criteria andNpcIdEqualTo(Integer value) {
            addCriterion("npc_id =", value, "npcId");
            return this;
        }

        public Criteria andNpcIdNotEqualTo(Integer value) {
            addCriterion("npc_id <>", value, "npcId");
            return this;
        }

        public Criteria andNpcIdGreaterThan(Integer value) {
            addCriterion("npc_id >", value, "npcId");
            return this;
        }

        public Criteria andNpcIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("npc_id >=", value, "npcId");
            return this;
        }

        public Criteria andNpcIdLessThan(Integer value) {
            addCriterion("npc_id <", value, "npcId");
            return this;
        }

        public Criteria andNpcIdLessThanOrEqualTo(Integer value) {
            addCriterion("npc_id <=", value, "npcId");
            return this;
        }

        public Criteria andNpcIdIn(List values) {
            addCriterion("npc_id in", values, "npcId");
            return this;
        }

        public Criteria andNpcIdNotIn(List values) {
            addCriterion("npc_id not in", values, "npcId");
            return this;
        }

        public Criteria andNpcIdBetween(Integer value1, Integer value2) {
            addCriterion("npc_id between", value1, value2, "npcId");
            return this;
        }

        public Criteria andNpcIdNotBetween(Integer value1, Integer value2) {
            addCriterion("npc_id not between", value1, value2, "npcId");
            return this;
        }

        public Criteria andAliasIsNull() {
            addCriterion("alias is null");
            return this;
        }

        public Criteria andAliasIsNotNull() {
            addCriterion("alias is not null");
            return this;
        }

        public Criteria andAliasEqualTo(String value) {
            addCriterion("alias =", value, "alias");
            return this;
        }

        public Criteria andAliasNotEqualTo(String value) {
            addCriterion("alias <>", value, "alias");
            return this;
        }

        public Criteria andAliasGreaterThan(String value) {
            addCriterion("alias >", value, "alias");
            return this;
        }

        public Criteria andAliasGreaterThanOrEqualTo(String value) {
            addCriterion("alias >=", value, "alias");
            return this;
        }

        public Criteria andAliasLessThan(String value) {
            addCriterion("alias <", value, "alias");
            return this;
        }

        public Criteria andAliasLessThanOrEqualTo(String value) {
            addCriterion("alias <=", value, "alias");
            return this;
        }

        public Criteria andAliasLike(String value) {
            addCriterion("alias like", value, "alias");
            return this;
        }

        public Criteria andAliasNotLike(String value) {
            addCriterion("alias not like", value, "alias");
            return this;
        }

        public Criteria andAliasIn(List values) {
            addCriterion("alias in", values, "alias");
            return this;
        }

        public Criteria andAliasNotIn(List values) {
            addCriterion("alias not in", values, "alias");
            return this;
        }

        public Criteria andAliasBetween(String value1, String value2) {
            addCriterion("alias between", value1, value2, "alias");
            return this;
        }

        public Criteria andAliasNotBetween(String value1, String value2) {
            addCriterion("alias not between", value1, value2, "alias");
            return this;
        }
    }
}