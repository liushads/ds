package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class RouteExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    public RouteExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    protected RouteExample(RouteExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table route
     *
     * @ibatorgenerated Wed Apr 07 13:15:14 CST 2010
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andCity1IsNull() {
            addCriterion("city1 is null");
            return this;
        }

        public Criteria andCity1IsNotNull() {
            addCriterion("city1 is not null");
            return this;
        }

        public Criteria andCity1EqualTo(Integer value) {
            addCriterion("city1 =", value, "city1");
            return this;
        }

        public Criteria andCity1NotEqualTo(Integer value) {
            addCriterion("city1 <>", value, "city1");
            return this;
        }

        public Criteria andCity1GreaterThan(Integer value) {
            addCriterion("city1 >", value, "city1");
            return this;
        }

        public Criteria andCity1GreaterThanOrEqualTo(Integer value) {
            addCriterion("city1 >=", value, "city1");
            return this;
        }

        public Criteria andCity1LessThan(Integer value) {
            addCriterion("city1 <", value, "city1");
            return this;
        }

        public Criteria andCity1LessThanOrEqualTo(Integer value) {
            addCriterion("city1 <=", value, "city1");
            return this;
        }

        public Criteria andCity1In(List values) {
            addCriterion("city1 in", values, "city1");
            return this;
        }

        public Criteria andCity1NotIn(List values) {
            addCriterion("city1 not in", values, "city1");
            return this;
        }

        public Criteria andCity1Between(Integer value1, Integer value2) {
            addCriterion("city1 between", value1, value2, "city1");
            return this;
        }

        public Criteria andCity1NotBetween(Integer value1, Integer value2) {
            addCriterion("city1 not between", value1, value2, "city1");
            return this;
        }

        public Criteria andCity2IsNull() {
            addCriterion("city2 is null");
            return this;
        }

        public Criteria andCity2IsNotNull() {
            addCriterion("city2 is not null");
            return this;
        }

        public Criteria andCity2EqualTo(Integer value) {
            addCriterion("city2 =", value, "city2");
            return this;
        }

        public Criteria andCity2NotEqualTo(Integer value) {
            addCriterion("city2 <>", value, "city2");
            return this;
        }

        public Criteria andCity2GreaterThan(Integer value) {
            addCriterion("city2 >", value, "city2");
            return this;
        }

        public Criteria andCity2GreaterThanOrEqualTo(Integer value) {
            addCriterion("city2 >=", value, "city2");
            return this;
        }

        public Criteria andCity2LessThan(Integer value) {
            addCriterion("city2 <", value, "city2");
            return this;
        }

        public Criteria andCity2LessThanOrEqualTo(Integer value) {
            addCriterion("city2 <=", value, "city2");
            return this;
        }

        public Criteria andCity2In(List values) {
            addCriterion("city2 in", values, "city2");
            return this;
        }

        public Criteria andCity2NotIn(List values) {
            addCriterion("city2 not in", values, "city2");
            return this;
        }

        public Criteria andCity2Between(Integer value1, Integer value2) {
            addCriterion("city2 between", value1, value2, "city2");
            return this;
        }

        public Criteria andCity2NotBetween(Integer value1, Integer value2) {
            addCriterion("city2 not between", value1, value2, "city2");
            return this;
        }

        public Criteria andDistanceIsNull() {
            addCriterion("distance is null");
            return this;
        }

        public Criteria andDistanceIsNotNull() {
            addCriterion("distance is not null");
            return this;
        }

        public Criteria andDistanceEqualTo(Integer value) {
            addCriterion("distance =", value, "distance");
            return this;
        }

        public Criteria andDistanceNotEqualTo(Integer value) {
            addCriterion("distance <>", value, "distance");
            return this;
        }

        public Criteria andDistanceGreaterThan(Integer value) {
            addCriterion("distance >", value, "distance");
            return this;
        }

        public Criteria andDistanceGreaterThanOrEqualTo(Integer value) {
            addCriterion("distance >=", value, "distance");
            return this;
        }

        public Criteria andDistanceLessThan(Integer value) {
            addCriterion("distance <", value, "distance");
            return this;
        }

        public Criteria andDistanceLessThanOrEqualTo(Integer value) {
            addCriterion("distance <=", value, "distance");
            return this;
        }

        public Criteria andDistanceIn(List values) {
            addCriterion("distance in", values, "distance");
            return this;
        }

        public Criteria andDistanceNotIn(List values) {
            addCriterion("distance not in", values, "distance");
            return this;
        }

        public Criteria andDistanceBetween(Integer value1, Integer value2) {
            addCriterion("distance between", value1, value2, "distance");
            return this;
        }

        public Criteria andDistanceNotBetween(Integer value1, Integer value2) {
            addCriterion("distance not between", value1, value2, "distance");
            return this;
        }
    }
}