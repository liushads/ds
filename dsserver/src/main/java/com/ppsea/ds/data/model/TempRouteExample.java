package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class TempRouteExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	public TempRouteExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	protected TempRouteExample(TempRouteExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table temp_route
	 * @ibatorgenerated  Fri Apr 09 16:45:52 CST 2010
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List values) {
			addCriterion("id in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List values) {
			addCriterion("id not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return this;
		}

		public Criteria andStartCityIsNull() {
			addCriterion("start_city is null");
			return this;
		}

		public Criteria andStartCityIsNotNull() {
			addCriterion("start_city is not null");
			return this;
		}

		public Criteria andStartCityEqualTo(Integer value) {
			addCriterion("start_city =", value, "startCity");
			return this;
		}

		public Criteria andStartCityNotEqualTo(Integer value) {
			addCriterion("start_city <>", value, "startCity");
			return this;
		}

		public Criteria andStartCityGreaterThan(Integer value) {
			addCriterion("start_city >", value, "startCity");
			return this;
		}

		public Criteria andStartCityGreaterThanOrEqualTo(Integer value) {
			addCriterion("start_city >=", value, "startCity");
			return this;
		}

		public Criteria andStartCityLessThan(Integer value) {
			addCriterion("start_city <", value, "startCity");
			return this;
		}

		public Criteria andStartCityLessThanOrEqualTo(Integer value) {
			addCriterion("start_city <=", value, "startCity");
			return this;
		}

		public Criteria andStartCityIn(List values) {
			addCriterion("start_city in", values, "startCity");
			return this;
		}

		public Criteria andStartCityNotIn(List values) {
			addCriterion("start_city not in", values, "startCity");
			return this;
		}

		public Criteria andStartCityBetween(Integer value1, Integer value2) {
			addCriterion("start_city between", value1, value2, "startCity");
			return this;
		}

		public Criteria andStartCityNotBetween(Integer value1, Integer value2) {
			addCriterion("start_city not between", value1, value2, "startCity");
			return this;
		}

		public Criteria andEndCityIsNull() {
			addCriterion("end_city is null");
			return this;
		}

		public Criteria andEndCityIsNotNull() {
			addCriterion("end_city is not null");
			return this;
		}

		public Criteria andEndCityEqualTo(Integer value) {
			addCriterion("end_city =", value, "endCity");
			return this;
		}

		public Criteria andEndCityNotEqualTo(Integer value) {
			addCriterion("end_city <>", value, "endCity");
			return this;
		}

		public Criteria andEndCityGreaterThan(Integer value) {
			addCriterion("end_city >", value, "endCity");
			return this;
		}

		public Criteria andEndCityGreaterThanOrEqualTo(Integer value) {
			addCriterion("end_city >=", value, "endCity");
			return this;
		}

		public Criteria andEndCityLessThan(Integer value) {
			addCriterion("end_city <", value, "endCity");
			return this;
		}

		public Criteria andEndCityLessThanOrEqualTo(Integer value) {
			addCriterion("end_city <=", value, "endCity");
			return this;
		}

		public Criteria andEndCityIn(List values) {
			addCriterion("end_city in", values, "endCity");
			return this;
		}

		public Criteria andEndCityNotIn(List values) {
			addCriterion("end_city not in", values, "endCity");
			return this;
		}

		public Criteria andEndCityBetween(Integer value1, Integer value2) {
			addCriterion("end_city between", value1, value2, "endCity");
			return this;
		}

		public Criteria andEndCityNotBetween(Integer value1, Integer value2) {
			addCriterion("end_city not between", value1, value2, "endCity");
			return this;
		}

		public Criteria andPathIsNull() {
			addCriterion("path is null");
			return this;
		}

		public Criteria andPathIsNotNull() {
			addCriterion("path is not null");
			return this;
		}

		public Criteria andPathEqualTo(String value) {
			addCriterion("path =", value, "path");
			return this;
		}

		public Criteria andPathNotEqualTo(String value) {
			addCriterion("path <>", value, "path");
			return this;
		}

		public Criteria andPathGreaterThan(String value) {
			addCriterion("path >", value, "path");
			return this;
		}

		public Criteria andPathGreaterThanOrEqualTo(String value) {
			addCriterion("path >=", value, "path");
			return this;
		}

		public Criteria andPathLessThan(String value) {
			addCriterion("path <", value, "path");
			return this;
		}

		public Criteria andPathLessThanOrEqualTo(String value) {
			addCriterion("path <=", value, "path");
			return this;
		}

		public Criteria andPathLike(String value) {
			addCriterion("path like", value, "path");
			return this;
		}

		public Criteria andPathNotLike(String value) {
			addCriterion("path not like", value, "path");
			return this;
		}

		public Criteria andPathIn(List values) {
			addCriterion("path in", values, "path");
			return this;
		}

		public Criteria andPathNotIn(List values) {
			addCriterion("path not in", values, "path");
			return this;
		}

		public Criteria andPathBetween(String value1, String value2) {
			addCriterion("path between", value1, value2, "path");
			return this;
		}

		public Criteria andPathNotBetween(String value1, String value2) {
			addCriterion("path not between", value1, value2, "path");
			return this;
		}

		public Criteria andDistanceIsNull() {
			addCriterion("distance is null");
			return this;
		}

		public Criteria andDistanceIsNotNull() {
			addCriterion("distance is not null");
			return this;
		}

		public Criteria andDistanceEqualTo(Integer value) {
			addCriterion("distance =", value, "distance");
			return this;
		}

		public Criteria andDistanceNotEqualTo(Integer value) {
			addCriterion("distance <>", value, "distance");
			return this;
		}

		public Criteria andDistanceGreaterThan(Integer value) {
			addCriterion("distance >", value, "distance");
			return this;
		}

		public Criteria andDistanceGreaterThanOrEqualTo(Integer value) {
			addCriterion("distance >=", value, "distance");
			return this;
		}

		public Criteria andDistanceLessThan(Integer value) {
			addCriterion("distance <", value, "distance");
			return this;
		}

		public Criteria andDistanceLessThanOrEqualTo(Integer value) {
			addCriterion("distance <=", value, "distance");
			return this;
		}

		public Criteria andDistanceIn(List values) {
			addCriterion("distance in", values, "distance");
			return this;
		}

		public Criteria andDistanceNotIn(List values) {
			addCriterion("distance not in", values, "distance");
			return this;
		}

		public Criteria andDistanceBetween(Integer value1, Integer value2) {
			addCriterion("distance between", value1, value2, "distance");
			return this;
		}

		public Criteria andDistanceNotBetween(Integer value1, Integer value2) {
			addCriterion("distance not between", value1, value2, "distance");
			return this;
		}
	}
}