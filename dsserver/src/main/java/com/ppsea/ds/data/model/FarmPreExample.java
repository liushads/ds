package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FarmPreExample {
    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    protected String orderByClause;

    /**
     * This field was generated by Apache iBATIS ibator.
     * This field corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    protected List oredCriteria;

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    public FarmPreExample() {
        oredCriteria = new ArrayList();
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    protected FarmPreExample(FarmPreExample example) {
        this.orderByClause = example.orderByClause;
        this.oredCriteria = example.oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    public void setOrderByClause(String orderByClause) {
        this.orderByClause = orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    public String getOrderByClause() {
        return orderByClause;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    public List getOredCriteria() {
        return oredCriteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    public void or(Criteria criteria) {
        oredCriteria.add(criteria);
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    public Criteria createCriteria() {
        Criteria criteria = createCriteriaInternal();
        if (oredCriteria.size() == 0) {
            oredCriteria.add(criteria);
        }
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    protected Criteria createCriteriaInternal() {
        Criteria criteria = new Criteria();
        return criteria;
    }

    /**
     * This method was generated by Apache iBATIS ibator.
     * This method corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    public void clear() {
        oredCriteria.clear();
    }

    /**
     * This class was generated by Apache iBATIS ibator.
     * This class corresponds to the database table farm_pre
     *
     * @ibatorgenerated Fri Mar 01 13:49:53 CST 2013
     */
    public static class Criteria {
        protected List criteriaWithoutValue;

        protected List criteriaWithSingleValue;

        protected List criteriaWithListValue;

        protected List criteriaWithBetweenValue;

        protected Criteria() {
            super();
            criteriaWithoutValue = new ArrayList();
            criteriaWithSingleValue = new ArrayList();
            criteriaWithListValue = new ArrayList();
            criteriaWithBetweenValue = new ArrayList();
        }

        public boolean isValid() {
            return criteriaWithoutValue.size() > 0
                || criteriaWithSingleValue.size() > 0
                || criteriaWithListValue.size() > 0
                || criteriaWithBetweenValue.size() > 0;
        }

        public List getCriteriaWithoutValue() {
            return criteriaWithoutValue;
        }

        public List getCriteriaWithSingleValue() {
            return criteriaWithSingleValue;
        }

        public List getCriteriaWithListValue() {
            return criteriaWithListValue;
        }

        public List getCriteriaWithBetweenValue() {
            return criteriaWithBetweenValue;
        }

        protected void addCriterion(String condition) {
            if (condition == null) {
                throw new RuntimeException("Value for condition cannot be null");
            }
            criteriaWithoutValue.add(condition);
        }

        protected void addCriterion(String condition, Object value, String property) {
            if (value == null) {
                throw new RuntimeException("Value for " + property + " cannot be null");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("value", value);
            criteriaWithSingleValue.add(map);
        }

        protected void addCriterion(String condition, List values, String property) {
            if (values == null || values.size() == 0) {
                throw new RuntimeException("Value list for " + property + " cannot be null or empty");
            }
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", values);
            criteriaWithListValue.add(map);
        }

        protected void addCriterion(String condition, Object value1, Object value2, String property) {
            if (value1 == null || value2 == null) {
                throw new RuntimeException("Between values for " + property + " cannot be null");
            }
            List list = new ArrayList();
            list.add(value1);
            list.add(value2);
            Map map = new HashMap();
            map.put("condition", condition);
            map.put("values", list);
            criteriaWithBetweenValue.add(map);
        }

        public Criteria andIdIsNull() {
            addCriterion("id is null");
            return this;
        }

        public Criteria andIdIsNotNull() {
            addCriterion("id is not null");
            return this;
        }

        public Criteria andIdEqualTo(Integer value) {
            addCriterion("id =", value, "id");
            return this;
        }

        public Criteria andIdNotEqualTo(Integer value) {
            addCriterion("id <>", value, "id");
            return this;
        }

        public Criteria andIdGreaterThan(Integer value) {
            addCriterion("id >", value, "id");
            return this;
        }

        public Criteria andIdGreaterThanOrEqualTo(Integer value) {
            addCriterion("id >=", value, "id");
            return this;
        }

        public Criteria andIdLessThan(Integer value) {
            addCriterion("id <", value, "id");
            return this;
        }

        public Criteria andIdLessThanOrEqualTo(Integer value) {
            addCriterion("id <=", value, "id");
            return this;
        }

        public Criteria andIdIn(List values) {
            addCriterion("id in", values, "id");
            return this;
        }

        public Criteria andIdNotIn(List values) {
            addCriterion("id not in", values, "id");
            return this;
        }

        public Criteria andIdBetween(Integer value1, Integer value2) {
            addCriterion("id between", value1, value2, "id");
            return this;
        }

        public Criteria andIdNotBetween(Integer value1, Integer value2) {
            addCriterion("id not between", value1, value2, "id");
            return this;
        }

        public Criteria andPreIsNull() {
            addCriterion("pre is null");
            return this;
        }

        public Criteria andPreIsNotNull() {
            addCriterion("pre is not null");
            return this;
        }

        public Criteria andPreEqualTo(Integer value) {
            addCriterion("pre =", value, "pre");
            return this;
        }

        public Criteria andPreNotEqualTo(Integer value) {
            addCriterion("pre <>", value, "pre");
            return this;
        }

        public Criteria andPreGreaterThan(Integer value) {
            addCriterion("pre >", value, "pre");
            return this;
        }

        public Criteria andPreGreaterThanOrEqualTo(Integer value) {
            addCriterion("pre >=", value, "pre");
            return this;
        }

        public Criteria andPreLessThan(Integer value) {
            addCriterion("pre <", value, "pre");
            return this;
        }

        public Criteria andPreLessThanOrEqualTo(Integer value) {
            addCriterion("pre <=", value, "pre");
            return this;
        }

        public Criteria andPreIn(List values) {
            addCriterion("pre in", values, "pre");
            return this;
        }

        public Criteria andPreNotIn(List values) {
            addCriterion("pre not in", values, "pre");
            return this;
        }

        public Criteria andPreBetween(Integer value1, Integer value2) {
            addCriterion("pre between", value1, value2, "pre");
            return this;
        }

        public Criteria andPreNotBetween(Integer value1, Integer value2) {
            addCriterion("pre not between", value1, value2, "pre");
            return this;
        }

        public Criteria andValueIsNull() {
            addCriterion("value is null");
            return this;
        }

        public Criteria andValueIsNotNull() {
            addCriterion("value is not null");
            return this;
        }

        public Criteria andValueEqualTo(Integer value) {
            addCriterion("value =", value, "value");
            return this;
        }

        public Criteria andValueNotEqualTo(Integer value) {
            addCriterion("value <>", value, "value");
            return this;
        }

        public Criteria andValueGreaterThan(Integer value) {
            addCriterion("value >", value, "value");
            return this;
        }

        public Criteria andValueGreaterThanOrEqualTo(Integer value) {
            addCriterion("value >=", value, "value");
            return this;
        }

        public Criteria andValueLessThan(Integer value) {
            addCriterion("value <", value, "value");
            return this;
        }

        public Criteria andValueLessThanOrEqualTo(Integer value) {
            addCriterion("value <=", value, "value");
            return this;
        }

        public Criteria andValueIn(List values) {
            addCriterion("value in", values, "value");
            return this;
        }

        public Criteria andValueNotIn(List values) {
            addCriterion("value not in", values, "value");
            return this;
        }

        public Criteria andValueBetween(Integer value1, Integer value2) {
            addCriterion("value between", value1, value2, "value");
            return this;
        }

        public Criteria andValueNotBetween(Integer value1, Integer value2) {
            addCriterion("value not between", value1, value2, "value");
            return this;
        }

        public Criteria andFarmStatusIsNull() {
            addCriterion("farm_status is null");
            return this;
        }

        public Criteria andFarmStatusIsNotNull() {
            addCriterion("farm_status is not null");
            return this;
        }

        public Criteria andFarmStatusEqualTo(Integer value) {
            addCriterion("farm_status =", value, "farmStatus");
            return this;
        }

        public Criteria andFarmStatusNotEqualTo(Integer value) {
            addCriterion("farm_status <>", value, "farmStatus");
            return this;
        }

        public Criteria andFarmStatusGreaterThan(Integer value) {
            addCriterion("farm_status >", value, "farmStatus");
            return this;
        }

        public Criteria andFarmStatusGreaterThanOrEqualTo(Integer value) {
            addCriterion("farm_status >=", value, "farmStatus");
            return this;
        }

        public Criteria andFarmStatusLessThan(Integer value) {
            addCriterion("farm_status <", value, "farmStatus");
            return this;
        }

        public Criteria andFarmStatusLessThanOrEqualTo(Integer value) {
            addCriterion("farm_status <=", value, "farmStatus");
            return this;
        }

        public Criteria andFarmStatusIn(List values) {
            addCriterion("farm_status in", values, "farmStatus");
            return this;
        }

        public Criteria andFarmStatusNotIn(List values) {
            addCriterion("farm_status not in", values, "farmStatus");
            return this;
        }

        public Criteria andFarmStatusBetween(Integer value1, Integer value2) {
            addCriterion("farm_status between", value1, value2, "farmStatus");
            return this;
        }

        public Criteria andFarmStatusNotBetween(Integer value1, Integer value2) {
            addCriterion("farm_status not between", value1, value2, "farmStatus");
            return this;
        }

        public Criteria andRewardTypeIsNull() {
            addCriterion("reward_type is null");
            return this;
        }

        public Criteria andRewardTypeIsNotNull() {
            addCriterion("reward_type is not null");
            return this;
        }

        public Criteria andRewardTypeEqualTo(Integer value) {
            addCriterion("reward_type =", value, "rewardType");
            return this;
        }

        public Criteria andRewardTypeNotEqualTo(Integer value) {
            addCriterion("reward_type <>", value, "rewardType");
            return this;
        }

        public Criteria andRewardTypeGreaterThan(Integer value) {
            addCriterion("reward_type >", value, "rewardType");
            return this;
        }

        public Criteria andRewardTypeGreaterThanOrEqualTo(Integer value) {
            addCriterion("reward_type >=", value, "rewardType");
            return this;
        }

        public Criteria andRewardTypeLessThan(Integer value) {
            addCriterion("reward_type <", value, "rewardType");
            return this;
        }

        public Criteria andRewardTypeLessThanOrEqualTo(Integer value) {
            addCriterion("reward_type <=", value, "rewardType");
            return this;
        }

        public Criteria andRewardTypeIn(List values) {
            addCriterion("reward_type in", values, "rewardType");
            return this;
        }

        public Criteria andRewardTypeNotIn(List values) {
            addCriterion("reward_type not in", values, "rewardType");
            return this;
        }

        public Criteria andRewardTypeBetween(Integer value1, Integer value2) {
            addCriterion("reward_type between", value1, value2, "rewardType");
            return this;
        }

        public Criteria andRewardTypeNotBetween(Integer value1, Integer value2) {
            addCriterion("reward_type not between", value1, value2, "rewardType");
            return this;
        }
    }
}