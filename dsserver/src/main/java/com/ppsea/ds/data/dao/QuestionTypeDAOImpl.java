package com.ppsea.ds.data.dao;

import com.ibatis.sqlmap.client.SqlMapClient;
import com.ppsea.ds.data.model.QuestionType;
import com.ppsea.ds.data.model.QuestionTypeExample;
import java.sql.SQLException;
import java.util.List;

public class QuestionTypeDAOImpl implements QuestionTypeDAO {

	/**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    private SqlMapClient sqlMapClient;

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public QuestionTypeDAOImpl(SqlMapClient sqlMapClient) {
	    super();
	    this.sqlMapClient = sqlMapClient;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public int countByExample(QuestionTypeExample example) throws SQLException {
	    Integer count = (Integer) sqlMapClient.queryForObject(
	            "question_type.ibatorgenerated_countByExample", example);
	    return count.intValue();
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public int deleteByExample(QuestionTypeExample example) throws SQLException {
	    int rows = sqlMapClient.delete(
	            "question_type.ibatorgenerated_deleteByExample", example);
	    return rows;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public int deleteByPrimaryKey(Integer id) throws SQLException {
	    QuestionType key = new QuestionType();
	    key.setId(id);
	    int rows = sqlMapClient.delete(
	            "question_type.ibatorgenerated_deleteByPrimaryKey", key);
	    return rows;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public Integer insert(QuestionType record) throws SQLException {
	    Object newKey = sqlMapClient.insert(
	            "question_type.ibatorgenerated_insert", record);
	    return (Integer) newKey;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public Integer insertSelective(QuestionType record) throws SQLException {
	    Object newKey = sqlMapClient.insert(
	            "question_type.ibatorgenerated_insertSelective", record);
	    return (Integer) newKey;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public List selectByExample(QuestionTypeExample example)
            throws SQLException {
	    List list = sqlMapClient.queryForList(
	            "question_type.ibatorgenerated_selectByExample", example);
	    return list;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public QuestionType selectByPrimaryKey(Integer id) throws SQLException {
	    QuestionType key = new QuestionType();
	    key.setId(id);
	    QuestionType record = (QuestionType) sqlMapClient.queryForObject(
	            "question_type.ibatorgenerated_selectByPrimaryKey", key);
	    return record;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public int updateByExampleSelective(QuestionType record,
            QuestionTypeExample example) throws SQLException {
	    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
	    int rows = sqlMapClient
	            .update(
	                    "question_type.ibatorgenerated_updateByExampleSelective",
	                    parms);
	    return rows;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public int updateByExample(QuestionType record, QuestionTypeExample example)
            throws SQLException {
	    UpdateByExampleParms parms = new UpdateByExampleParms(record, example);
	    int rows = sqlMapClient.update(
	            "question_type.ibatorgenerated_updateByExample", parms);
	    return rows;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public int updateByPrimaryKeySelective(QuestionType record)
            throws SQLException {
	    int rows = sqlMapClient.update(
	            "question_type.ibatorgenerated_updateByPrimaryKeySelective",
	            record);
	    return rows;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    public int updateByPrimaryKey(QuestionType record) throws SQLException {
	    int rows = sqlMapClient.update(
	            "question_type.ibatorgenerated_updateByPrimaryKey", record);
	    return rows;
    }

	/**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database table question_type
     * @ibatorgenerated  Wed May 25 16:18:24 CST 2011
     */
    private static class UpdateByExampleParms extends QuestionTypeExample {
	    private Object record;

	    public UpdateByExampleParms(Object record, QuestionTypeExample example) {
		    super(example);
		    this.record = record;
	    }

	    public Object getRecord() {
		    return record;
	    }
    }
}