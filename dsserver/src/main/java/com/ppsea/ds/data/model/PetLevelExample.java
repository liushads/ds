package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class PetLevelExample {

	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	protected String orderByClause;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	protected List oredCriteria;

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	public PetLevelExample() {
		oredCriteria = new ArrayList();
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	protected PetLevelExample(PetLevelExample example) {
		this.orderByClause = example.orderByClause;
		this.oredCriteria = example.oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	public void setOrderByClause(String orderByClause) {
		this.orderByClause = orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	public String getOrderByClause() {
		return orderByClause;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	public List getOredCriteria() {
		return oredCriteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	public void or(Criteria criteria) {
		oredCriteria.add(criteria);
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	public Criteria createCriteria() {
		Criteria criteria = createCriteriaInternal();
		if (oredCriteria.size() == 0) {
			oredCriteria.add(criteria);
		}
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	protected Criteria createCriteriaInternal() {
		Criteria criteria = new Criteria();
		return criteria;
	}

	/**
	 * This method was generated by Apache iBATIS ibator. This method corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	public void clear() {
		oredCriteria.clear();
	}

	/**
	 * This class was generated by Apache iBATIS ibator. This class corresponds to the database table pet_level
	 * @ibatorgenerated  Mon Apr 26 14:31:49 CST 2010
	 */
	public static class Criteria {
		protected List criteriaWithoutValue;
		protected List criteriaWithSingleValue;
		protected List criteriaWithListValue;
		protected List criteriaWithBetweenValue;

		protected Criteria() {
			super();
			criteriaWithoutValue = new ArrayList();
			criteriaWithSingleValue = new ArrayList();
			criteriaWithListValue = new ArrayList();
			criteriaWithBetweenValue = new ArrayList();
		}

		public boolean isValid() {
			return criteriaWithoutValue.size() > 0
					|| criteriaWithSingleValue.size() > 0
					|| criteriaWithListValue.size() > 0
					|| criteriaWithBetweenValue.size() > 0;
		}

		public List getCriteriaWithoutValue() {
			return criteriaWithoutValue;
		}

		public List getCriteriaWithSingleValue() {
			return criteriaWithSingleValue;
		}

		public List getCriteriaWithListValue() {
			return criteriaWithListValue;
		}

		public List getCriteriaWithBetweenValue() {
			return criteriaWithBetweenValue;
		}

		protected void addCriterion(String condition) {
			if (condition == null) {
				throw new RuntimeException("Value for condition cannot be null");
			}
			criteriaWithoutValue.add(condition);
		}

		protected void addCriterion(String condition, Object value,
				String property) {
			if (value == null) {
				throw new RuntimeException("Value for " + property
						+ " cannot be null");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("value", value);
			criteriaWithSingleValue.add(map);
		}

		protected void addCriterion(String condition, List values,
				String property) {
			if (values == null || values.size() == 0) {
				throw new RuntimeException("Value list for " + property
						+ " cannot be null or empty");
			}
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", values);
			criteriaWithListValue.add(map);
		}

		protected void addCriterion(String condition, Object value1,
				Object value2, String property) {
			if (value1 == null || value2 == null) {
				throw new RuntimeException("Between values for " + property
						+ " cannot be null");
			}
			List list = new ArrayList();
			list.add(value1);
			list.add(value2);
			Map map = new HashMap();
			map.put("condition", condition);
			map.put("values", list);
			criteriaWithBetweenValue.add(map);
		}

		public Criteria andIdIsNull() {
			addCriterion("id is null");
			return this;
		}

		public Criteria andIdIsNotNull() {
			addCriterion("id is not null");
			return this;
		}

		public Criteria andIdEqualTo(Integer value) {
			addCriterion("id =", value, "id");
			return this;
		}

		public Criteria andIdNotEqualTo(Integer value) {
			addCriterion("id <>", value, "id");
			return this;
		}

		public Criteria andIdGreaterThan(Integer value) {
			addCriterion("id >", value, "id");
			return this;
		}

		public Criteria andIdGreaterThanOrEqualTo(Integer value) {
			addCriterion("id >=", value, "id");
			return this;
		}

		public Criteria andIdLessThan(Integer value) {
			addCriterion("id <", value, "id");
			return this;
		}

		public Criteria andIdLessThanOrEqualTo(Integer value) {
			addCriterion("id <=", value, "id");
			return this;
		}

		public Criteria andIdIn(List values) {
			addCriterion("id in", values, "id");
			return this;
		}

		public Criteria andIdNotIn(List values) {
			addCriterion("id not in", values, "id");
			return this;
		}

		public Criteria andIdBetween(Integer value1, Integer value2) {
			addCriterion("id between", value1, value2, "id");
			return this;
		}

		public Criteria andIdNotBetween(Integer value1, Integer value2) {
			addCriterion("id not between", value1, value2, "id");
			return this;
		}

		public Criteria andLevelIsNull() {
			addCriterion("level is null");
			return this;
		}

		public Criteria andLevelIsNotNull() {
			addCriterion("level is not null");
			return this;
		}

		public Criteria andLevelEqualTo(Integer value) {
			addCriterion("level =", value, "level");
			return this;
		}

		public Criteria andLevelNotEqualTo(Integer value) {
			addCriterion("level <>", value, "level");
			return this;
		}

		public Criteria andLevelGreaterThan(Integer value) {
			addCriterion("level >", value, "level");
			return this;
		}

		public Criteria andLevelGreaterThanOrEqualTo(Integer value) {
			addCriterion("level >=", value, "level");
			return this;
		}

		public Criteria andLevelLessThan(Integer value) {
			addCriterion("level <", value, "level");
			return this;
		}

		public Criteria andLevelLessThanOrEqualTo(Integer value) {
			addCriterion("level <=", value, "level");
			return this;
		}

		public Criteria andLevelIn(List values) {
			addCriterion("level in", values, "level");
			return this;
		}

		public Criteria andLevelNotIn(List values) {
			addCriterion("level not in", values, "level");
			return this;
		}

		public Criteria andLevelBetween(Integer value1, Integer value2) {
			addCriterion("level between", value1, value2, "level");
			return this;
		}

		public Criteria andLevelNotBetween(Integer value1, Integer value2) {
			addCriterion("level not between", value1, value2, "level");
			return this;
		}

		public Criteria andMaxExpIsNull() {
			addCriterion("max_exp is null");
			return this;
		}

		public Criteria andMaxExpIsNotNull() {
			addCriterion("max_exp is not null");
			return this;
		}

		public Criteria andMaxExpEqualTo(Integer value) {
			addCriterion("max_exp =", value, "maxExp");
			return this;
		}

		public Criteria andMaxExpNotEqualTo(Integer value) {
			addCriterion("max_exp <>", value, "maxExp");
			return this;
		}

		public Criteria andMaxExpGreaterThan(Integer value) {
			addCriterion("max_exp >", value, "maxExp");
			return this;
		}

		public Criteria andMaxExpGreaterThanOrEqualTo(Integer value) {
			addCriterion("max_exp >=", value, "maxExp");
			return this;
		}

		public Criteria andMaxExpLessThan(Integer value) {
			addCriterion("max_exp <", value, "maxExp");
			return this;
		}

		public Criteria andMaxExpLessThanOrEqualTo(Integer value) {
			addCriterion("max_exp <=", value, "maxExp");
			return this;
		}

		public Criteria andMaxExpIn(List values) {
			addCriterion("max_exp in", values, "maxExp");
			return this;
		}

		public Criteria andMaxExpNotIn(List values) {
			addCriterion("max_exp not in", values, "maxExp");
			return this;
		}

		public Criteria andMaxExpBetween(Integer value1, Integer value2) {
			addCriterion("max_exp between", value1, value2, "maxExp");
			return this;
		}

		public Criteria andMaxExpNotBetween(Integer value1, Integer value2) {
			addCriterion("max_exp not between", value1, value2, "maxExp");
			return this;
		}

		public Criteria andPointIsNull() {
			addCriterion("point is null");
			return this;
		}

		public Criteria andPointIsNotNull() {
			addCriterion("point is not null");
			return this;
		}

		public Criteria andPointEqualTo(Integer value) {
			addCriterion("point =", value, "point");
			return this;
		}

		public Criteria andPointNotEqualTo(Integer value) {
			addCriterion("point <>", value, "point");
			return this;
		}

		public Criteria andPointGreaterThan(Integer value) {
			addCriterion("point >", value, "point");
			return this;
		}

		public Criteria andPointGreaterThanOrEqualTo(Integer value) {
			addCriterion("point >=", value, "point");
			return this;
		}

		public Criteria andPointLessThan(Integer value) {
			addCriterion("point <", value, "point");
			return this;
		}

		public Criteria andPointLessThanOrEqualTo(Integer value) {
			addCriterion("point <=", value, "point");
			return this;
		}

		public Criteria andPointIn(List values) {
			addCriterion("point in", values, "point");
			return this;
		}

		public Criteria andPointNotIn(List values) {
			addCriterion("point not in", values, "point");
			return this;
		}

		public Criteria andPointBetween(Integer value1, Integer value2) {
			addCriterion("point between", value1, value2, "point");
			return this;
		}

		public Criteria andPointNotBetween(Integer value1, Integer value2) {
			addCriterion("point not between", value1, value2, "point");
			return this;
		}
	}
}