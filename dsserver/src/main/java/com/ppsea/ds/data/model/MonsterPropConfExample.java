package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class MonsterPropConfExample {

	/**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    protected String orderByClause;
	/**
     * This field was generated by Apache iBATIS ibator. This field corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    protected List oredCriteria;

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    public MonsterPropConfExample() {
	    oredCriteria = new ArrayList();
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    protected MonsterPropConfExample(MonsterPropConfExample example) {
	    this.orderByClause = example.orderByClause;
	    this.oredCriteria = example.oredCriteria;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    public void setOrderByClause(String orderByClause) {
	    this.orderByClause = orderByClause;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    public String getOrderByClause() {
	    return orderByClause;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    public List getOredCriteria() {
	    return oredCriteria;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    public void or(Criteria criteria) {
	    oredCriteria.add(criteria);
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    public Criteria createCriteria() {
	    Criteria criteria = createCriteriaInternal();
	    if (oredCriteria.size() == 0) {
		    oredCriteria.add(criteria);
	    }
	    return criteria;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    protected Criteria createCriteriaInternal() {
	    Criteria criteria = new Criteria();
	    return criteria;
    }

	/**
     * This method was generated by Apache iBATIS ibator. This method corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    public void clear() {
	    oredCriteria.clear();
    }

	/**
     * This class was generated by Apache iBATIS ibator. This class corresponds to the database table monster_prop_conf
     * @ibatorgenerated  Tue Sep 14 11:29:44 CST 2010
     */
    public static class Criteria {
	    protected List criteriaWithoutValue;
	    protected List criteriaWithSingleValue;
	    protected List criteriaWithListValue;
	    protected List criteriaWithBetweenValue;

	    protected Criteria() {
		    super();
		    criteriaWithoutValue = new ArrayList();
		    criteriaWithSingleValue = new ArrayList();
		    criteriaWithListValue = new ArrayList();
		    criteriaWithBetweenValue = new ArrayList();
	    }

	    public boolean isValid() {
		    return criteriaWithoutValue.size() > 0
		            || criteriaWithSingleValue.size() > 0
		            || criteriaWithListValue.size() > 0
		            || criteriaWithBetweenValue.size() > 0;
	    }

	    public List getCriteriaWithoutValue() {
		    return criteriaWithoutValue;
	    }

	    public List getCriteriaWithSingleValue() {
		    return criteriaWithSingleValue;
	    }

	    public List getCriteriaWithListValue() {
		    return criteriaWithListValue;
	    }

	    public List getCriteriaWithBetweenValue() {
		    return criteriaWithBetweenValue;
	    }

	    protected void addCriterion(String condition) {
		    if (condition == null) {
			    throw new RuntimeException("Value for condition cannot be null");
		    }
		    criteriaWithoutValue.add(condition);
	    }

	    protected void addCriterion(String condition, Object value,
	            String property) {
		    if (value == null) {
			    throw new RuntimeException("Value for " + property
			            + " cannot be null");
		    }
		    Map map = new HashMap();
		    map.put("condition", condition);
		    map.put("value", value);
		    criteriaWithSingleValue.add(map);
	    }

	    protected void addCriterion(String condition, List values,
	            String property) {
		    if (values == null || values.size() == 0) {
			    throw new RuntimeException("Value list for " + property
			            + " cannot be null or empty");
		    }
		    Map map = new HashMap();
		    map.put("condition", condition);
		    map.put("values", values);
		    criteriaWithListValue.add(map);
	    }

	    protected void addCriterion(String condition, Object value1,
	            Object value2, String property) {
		    if (value1 == null || value2 == null) {
			    throw new RuntimeException("Between values for " + property
			            + " cannot be null");
		    }
		    List list = new ArrayList();
		    list.add(value1);
		    list.add(value2);
		    Map map = new HashMap();
		    map.put("condition", condition);
		    map.put("values", list);
		    criteriaWithBetweenValue.add(map);
	    }

	    public Criteria andIdIsNull() {
		    addCriterion("id is null");
		    return this;
	    }

	    public Criteria andIdIsNotNull() {
		    addCriterion("id is not null");
		    return this;
	    }

	    public Criteria andIdEqualTo(Integer value) {
		    addCriterion("id =", value, "id");
		    return this;
	    }

	    public Criteria andIdNotEqualTo(Integer value) {
		    addCriterion("id <>", value, "id");
		    return this;
	    }

	    public Criteria andIdGreaterThan(Integer value) {
		    addCriterion("id >", value, "id");
		    return this;
	    }

	    public Criteria andIdGreaterThanOrEqualTo(Integer value) {
		    addCriterion("id >=", value, "id");
		    return this;
	    }

	    public Criteria andIdLessThan(Integer value) {
		    addCriterion("id <", value, "id");
		    return this;
	    }

	    public Criteria andIdLessThanOrEqualTo(Integer value) {
		    addCriterion("id <=", value, "id");
		    return this;
	    }

	    public Criteria andIdIn(List values) {
		    addCriterion("id in", values, "id");
		    return this;
	    }

	    public Criteria andIdNotIn(List values) {
		    addCriterion("id not in", values, "id");
		    return this;
	    }

	    public Criteria andIdBetween(Integer value1, Integer value2) {
		    addCriterion("id between", value1, value2, "id");
		    return this;
	    }

	    public Criteria andIdNotBetween(Integer value1, Integer value2) {
		    addCriterion("id not between", value1, value2, "id");
		    return this;
	    }

	    public Criteria andMtypeIsNull() {
		    addCriterion("mtype is null");
		    return this;
	    }

	    public Criteria andMtypeIsNotNull() {
		    addCriterion("mtype is not null");
		    return this;
	    }

	    public Criteria andMtypeEqualTo(Integer value) {
		    addCriterion("mtype =", value, "mtype");
		    return this;
	    }

	    public Criteria andMtypeNotEqualTo(Integer value) {
		    addCriterion("mtype <>", value, "mtype");
		    return this;
	    }

	    public Criteria andMtypeGreaterThan(Integer value) {
		    addCriterion("mtype >", value, "mtype");
		    return this;
	    }

	    public Criteria andMtypeGreaterThanOrEqualTo(Integer value) {
		    addCriterion("mtype >=", value, "mtype");
		    return this;
	    }

	    public Criteria andMtypeLessThan(Integer value) {
		    addCriterion("mtype <", value, "mtype");
		    return this;
	    }

	    public Criteria andMtypeLessThanOrEqualTo(Integer value) {
		    addCriterion("mtype <=", value, "mtype");
		    return this;
	    }

	    public Criteria andMtypeIn(List values) {
		    addCriterion("mtype in", values, "mtype");
		    return this;
	    }

	    public Criteria andMtypeNotIn(List values) {
		    addCriterion("mtype not in", values, "mtype");
		    return this;
	    }

	    public Criteria andMtypeBetween(Integer value1, Integer value2) {
		    addCriterion("mtype between", value1, value2, "mtype");
		    return this;
	    }

	    public Criteria andMtypeNotBetween(Integer value1, Integer value2) {
		    addCriterion("mtype not between", value1, value2, "mtype");
		    return this;
	    }

	    public Criteria andMkeyIsNull() {
		    addCriterion("mkey is null");
		    return this;
	    }

	    public Criteria andMkeyIsNotNull() {
		    addCriterion("mkey is not null");
		    return this;
	    }

	    public Criteria andMkeyEqualTo(Integer value) {
		    addCriterion("mkey =", value, "mkey");
		    return this;
	    }

	    public Criteria andMkeyNotEqualTo(Integer value) {
		    addCriterion("mkey <>", value, "mkey");
		    return this;
	    }

	    public Criteria andMkeyGreaterThan(Integer value) {
		    addCriterion("mkey >", value, "mkey");
		    return this;
	    }

	    public Criteria andMkeyGreaterThanOrEqualTo(Integer value) {
		    addCriterion("mkey >=", value, "mkey");
		    return this;
	    }

	    public Criteria andMkeyLessThan(Integer value) {
		    addCriterion("mkey <", value, "mkey");
		    return this;
	    }

	    public Criteria andMkeyLessThanOrEqualTo(Integer value) {
		    addCriterion("mkey <=", value, "mkey");
		    return this;
	    }

	    public Criteria andMkeyIn(List values) {
		    addCriterion("mkey in", values, "mkey");
		    return this;
	    }

	    public Criteria andMkeyNotIn(List values) {
		    addCriterion("mkey not in", values, "mkey");
		    return this;
	    }

	    public Criteria andMkeyBetween(Integer value1, Integer value2) {
		    addCriterion("mkey between", value1, value2, "mkey");
		    return this;
	    }

	    public Criteria andMkeyNotBetween(Integer value1, Integer value2) {
		    addCriterion("mkey not between", value1, value2, "mkey");
		    return this;
	    }

	    public Criteria andMvalueIsNull() {
		    addCriterion("mvalue is null");
		    return this;
	    }

	    public Criteria andMvalueIsNotNull() {
		    addCriterion("mvalue is not null");
		    return this;
	    }

	    public Criteria andMvalueEqualTo(Integer value) {
		    addCriterion("mvalue =", value, "mvalue");
		    return this;
	    }

	    public Criteria andMvalueNotEqualTo(Integer value) {
		    addCriterion("mvalue <>", value, "mvalue");
		    return this;
	    }

	    public Criteria andMvalueGreaterThan(Integer value) {
		    addCriterion("mvalue >", value, "mvalue");
		    return this;
	    }

	    public Criteria andMvalueGreaterThanOrEqualTo(Integer value) {
		    addCriterion("mvalue >=", value, "mvalue");
		    return this;
	    }

	    public Criteria andMvalueLessThan(Integer value) {
		    addCriterion("mvalue <", value, "mvalue");
		    return this;
	    }

	    public Criteria andMvalueLessThanOrEqualTo(Integer value) {
		    addCriterion("mvalue <=", value, "mvalue");
		    return this;
	    }

	    public Criteria andMvalueIn(List values) {
		    addCriterion("mvalue in", values, "mvalue");
		    return this;
	    }

	    public Criteria andMvalueNotIn(List values) {
		    addCriterion("mvalue not in", values, "mvalue");
		    return this;
	    }

	    public Criteria andMvalueBetween(Integer value1, Integer value2) {
		    addCriterion("mvalue between", value1, value2, "mvalue");
		    return this;
	    }

	    public Criteria andMvalueNotBetween(Integer value1, Integer value2) {
		    addCriterion("mvalue not between", value1, value2, "mvalue");
		    return this;
	    }

	    public Criteria andDescriptionIsNull() {
		    addCriterion("description is null");
		    return this;
	    }

	    public Criteria andDescriptionIsNotNull() {
		    addCriterion("description is not null");
		    return this;
	    }

	    public Criteria andDescriptionEqualTo(String value) {
		    addCriterion("description =", value, "description");
		    return this;
	    }

	    public Criteria andDescriptionNotEqualTo(String value) {
		    addCriterion("description <>", value, "description");
		    return this;
	    }

	    public Criteria andDescriptionGreaterThan(String value) {
		    addCriterion("description >", value, "description");
		    return this;
	    }

	    public Criteria andDescriptionGreaterThanOrEqualTo(String value) {
		    addCriterion("description >=", value, "description");
		    return this;
	    }

	    public Criteria andDescriptionLessThan(String value) {
		    addCriterion("description <", value, "description");
		    return this;
	    }

	    public Criteria andDescriptionLessThanOrEqualTo(String value) {
		    addCriterion("description <=", value, "description");
		    return this;
	    }

	    public Criteria andDescriptionLike(String value) {
		    addCriterion("description like", value, "description");
		    return this;
	    }

	    public Criteria andDescriptionNotLike(String value) {
		    addCriterion("description not like", value, "description");
		    return this;
	    }

	    public Criteria andDescriptionIn(List values) {
		    addCriterion("description in", values, "description");
		    return this;
	    }

	    public Criteria andDescriptionNotIn(List values) {
		    addCriterion("description not in", values, "description");
		    return this;
	    }

	    public Criteria andDescriptionBetween(String value1, String value2) {
		    addCriterion("description between", value1, value2, "description");
		    return this;
	    }

	    public Criteria andDescriptionNotBetween(String value1, String value2) {
		    addCriterion("description not between", value1, value2,
		            "description");
		    return this;
	    }
    }
}