package com.ppsea.ds.data.model;

import java.util.ArrayList;
import java.util.Calendar;
import java.util.Collections;
import java.util.Date;
import java.util.HashMap;
import java.util.LinkedHashMap;
import java.util.LinkedList;
import java.util.List;
import java.util.Map;
import java.util.TreeMap;
import java.util.concurrent.ConcurrentHashMap;
import java.util.concurrent.locks.ReentrantLock;

import org.apache.log4j.Logger;

import com.ppsea.ds.command.CommandResult;
import com.ppsea.ds.data.BaseObject;
import com.ppsea.ds.data.BoughtPriceVo;
import com.ppsea.ds.data.Constants;
import com.ppsea.ds.data.ErrorMsg;
import com.ppsea.ds.data.FightResult;
import com.ppsea.ds.data.GlobalGenerator;
import com.ppsea.ds.data.Path;
import com.ppsea.ds.data.PlayerDyn;
import com.ppsea.ds.data.SellPriceVo;
import com.ppsea.ds.manager.ItemMG;
import com.ppsea.ds.manager.MapMG;
import com.ppsea.ds.manager.MonsterMG;
import com.ppsea.ds.manager.PlayerMG;
import com.ppsea.ds.manager.ResellPriceMG;
import com.ppsea.ds.service.DBService;
import com.ppsea.ds.service.ItemService;
import com.ppsea.ds.service.PlayerResellService;
import com.ppsea.ds.service.PlayerService;

public class Player extends BaseObject {
    /**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer id;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.user_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private String userId;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.name
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private String name;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.sex
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Byte sex;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.status
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Byte status;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.level
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer level;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.exp
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer exp;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.hp
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer hp;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.last_login_time
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Date lastLoginTime;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.gold
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer gold;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.adv_gold
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer advGold;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.copper
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Long copper;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.sect_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer sectId;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.city_facility_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer cityFacilityId;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.login_time
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Date loginTime;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.map
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private String map;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.passwd
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private String passwd;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.from_city_facility_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer fromCityFacilityId;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.chat_status
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Byte chatStatus;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.setting_flag
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer settingFlag;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.fame
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer fame;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.create_time
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Date createTime;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.event_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer eventId;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.description
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private String description;
	/**
	 * This field was generated by Apache iBATIS ibator. This field corresponds to the database column player.eternal
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	private Integer eternal;
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.id
	 * @return  the value of player.id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getId() {
		return id;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.id
	 * @param id  the value for player.id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setId(Integer id) {
		this.id = id;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.user_id
	 * @return  the value of player.user_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public String getUserId() {
		return userId;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.user_id
	 * @param userId  the value for player.user_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setUserId(String userId) {
		this.userId = userId;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.name
	 * @return  the value of player.name
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public String getName() {
		return name;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.name
	 * @param name  the value for player.name
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setName(String name) {
		this.name = name;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.sex
	 * @return  the value of player.sex
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Byte getSex() {
		return sex;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.sex
	 * @param sex  the value for player.sex
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setSex(Byte sex) {
		this.sex = sex;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.status
	 * @return  the value of player.status
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Byte getStatus() {
		return status;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.status
	 * @param status  the value for player.status
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setStatus(Byte status) {
		this.status = status;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.level
	 * @return  the value of player.level
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getLevel() {
		return level;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.level
	 * @param level  the value for player.level
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setLevel(Integer level) {
		this.level = level;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.exp
	 * @return  the value of player.exp
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getExp() {
		return exp;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.exp
	 * @param exp  the value for player.exp
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setExp(Integer exp) {
		this.exp = exp;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.hp
	 * @return  the value of player.hp
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getHp() {
		return hp;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.hp
	 * @param hp  the value for player.hp
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setHp(Integer hp) {
		this.hp = hp;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.last_login_time
	 * @return  the value of player.last_login_time
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Date getLastLoginTime() {
		return lastLoginTime;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.last_login_time
	 * @param lastLoginTime  the value for player.last_login_time
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setLastLoginTime(Date lastLoginTime) {
		this.lastLoginTime = lastLoginTime;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.gold
	 * @return  the value of player.gold
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getGold() {
		return gold;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.gold
	 * @param gold  the value for player.gold
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setGold(Integer gold) {
		this.gold = gold;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.adv_gold
	 * @return  the value of player.adv_gold
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getAdvGold() {
		return advGold;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.adv_gold
	 * @param advGold  the value for player.adv_gold
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setAdvGold(Integer advGold) {
		this.advGold = advGold;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.copper
	 * @return  the value of player.copper
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Long getCopper() {
		return copper;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.copper
	 * @param copper  the value for player.copper
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setCopper(Long copper) {
		this.copper = copper;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.sect_id
	 * @return  the value of player.sect_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getSectId() {
		return sectId;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.sect_id
	 * @param sectId  the value for player.sect_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setSectId(Integer sectId) {
		this.sectId = sectId;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.city_facility_id
	 * @return  the value of player.city_facility_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getCityFacilityId() {
		return cityFacilityId;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.city_facility_id
	 * @param cityFacilityId  the value for player.city_facility_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setCityFacilityId(Integer cityFacilityId) {
		this.cityFacilityId = cityFacilityId;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.login_time
	 * @return  the value of player.login_time
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Date getLoginTime() {
		return loginTime;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.login_time
	 * @param loginTime  the value for player.login_time
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setLoginTime(Date loginTime) {
		this.loginTime = loginTime;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.map
	 * @return  the value of player.map
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public String getMap() {
		return map;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.map
	 * @param map  the value for player.map
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setMap(String map) {
		this.map = map;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.passwd
	 * @return  the value of player.passwd
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public String getPasswd() {
		return passwd;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.passwd
	 * @param passwd  the value for player.passwd
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setPasswd(String passwd) {
		this.passwd = passwd;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.from_city_facility_id
	 * @return  the value of player.from_city_facility_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getFromCityFacilityId() {
		return fromCityFacilityId;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.from_city_facility_id
	 * @param fromCityFacilityId  the value for player.from_city_facility_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setFromCityFacilityId(Integer fromCityFacilityId) {
		this.fromCityFacilityId = fromCityFacilityId;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.chat_status
	 * @return  the value of player.chat_status
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Byte getChatStatus() {
		return chatStatus;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.chat_status
	 * @param chatStatus  the value for player.chat_status
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setChatStatus(Byte chatStatus) {
		this.chatStatus = chatStatus;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.setting_flag
	 * @return  the value of player.setting_flag
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getSettingFlag() {
		return settingFlag;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.setting_flag
	 * @param settingFlag  the value for player.setting_flag
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setSettingFlag(Integer settingFlag) {
		this.settingFlag = settingFlag;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.fame
	 * @return  the value of player.fame
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getFame() {
		return fame;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.fame
	 * @param fame  the value for player.fame
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setFame(Integer fame) {
		this.fame = fame;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.create_time
	 * @return  the value of player.create_time
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Date getCreateTime() {
		return createTime;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.create_time
	 * @param createTime  the value for player.create_time
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setCreateTime(Date createTime) {
		this.createTime = createTime;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.event_id
	 * @return  the value of player.event_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getEventId() {
		return eventId;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.event_id
	 * @param eventId  the value for player.event_id
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setEventId(Integer eventId) {
		this.eventId = eventId;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.description
	 * @return  the value of player.description
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public String getDescription() {
		return description;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.description
	 * @param description  the value for player.description
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setDescription(String description) {
		this.description = description;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method returns the value of the database column player.eternal
	 * @return  the value of player.eternal
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public Integer getEternal() {
		return eternal;
	}
	/**
	 * This method was generated by Apache iBATIS ibator. This method sets the value of the database column player.eternal
	 * @param eternal  the value for player.eternal
	 * @ibatorgenerated  Thu Feb 28 11:51:45 CST 2013
	 */
	public void setEternal(Integer eternal) {
		this.eternal = eternal;
	}
	/**
	 * 
	 */
	private static final long serialVersionUID = 1L;
	private Integer streamOpen = 0;
    private Integer stateOpen = 0;
	public Integer getStateOpen() {
		return stateOpen;
	}
	public void setStateOpen(Integer stateOpen) {
		this.stateOpen = stateOpen;
	}
	public Integer getStreamOpen() {
		return streamOpen;
	}
	public void setStreamOpen(Integer streamOpen) {
		this.streamOpen = streamOpen;
	}
	/****************************************************************************************
     *custom variable: transient
     * 
     * **************************************************************************************/
	
	//player itmes <PlayerItem.id,PlayerItem>
	private transient Map<String, PlayerItem> allItems = new HashMap<String, PlayerItem>();
	//arms <key=position,value=List<PlayerItem>>
	private transient Map<String, List<PlayerItem>> arms = new HashMap<String, List<PlayerItem>>();
	//used <key=position,value=List<PlayerItem>>
	private transient Map<String, List<PlayerItem>> usedArms = new HashMap<String, List<PlayerItem>>();
	// Map<type,Map<itemId, PlayerItem>>
	private transient Map<String, Map<String, PlayerItem>> nonArms = new HashMap<String, Map<String, PlayerItem>>();
	
	/** life item.key=usingItemId.*/
	private transient List<PlayerItemUsing> usingItems = new ArrayList<PlayerItemUsing>();
	
	/** enemy id, my enemy, who killed me.*/
	private transient Map<String, PlayerEnemy> enemies = new HashMap<String, PlayerEnemy>();
	
	// The rewards that I took
	private transient Map<PlayerMission, MissionCondition> rewards = new HashMap<PlayerMission, MissionCondition>();
	
	private transient long startTime;
	private transient long reqTimes;
	
	private transient int lastNpcId = 0;
    private transient long lastAccessTime = 0 ;
	private transient CityFacility cityFacility = null;
	private transient Map<Integer, Area> worldMap = new HashMap<Integer, Area>();
	private transient Path path;
	private transient int pathFinish;
	private transient int pathIndex;
	private transient int totalLeft = 0;
	private transient int startCity;
	private transient int endCity;
	private transient boolean direction = true;
	private transient int x;
	private transient int y;
//	private transient PlayerLevel playerLevel;	
	private transient String ip;
	private transient int matchStatus = 0;
	private transient Date onlinedate;
	
	// Mission list
	private transient Map<String, PlayerMission> missions = new LinkedHashMap<String, PlayerMission>();

	// Ongoing missions
	private transient Map<String, PlayerMission> onGoingMissions = new ConcurrentHashMap<String, PlayerMission>();

	// Past missions
	private transient PlayerMissionPast missionPast = null;

	private transient int systemMsgDisplayTimes = 0;

	//is read
	private transient long readMessageTime = 0;
	
	private transient List<Message> messages = Collections.synchronizedList(new LinkedList<Message>());
	
	// Interaction with NPCs, enemies. 
	// For NPC, <String, Integer> represents npcId and interaction level, different levels have different dialogs and actions
	// For enemy, <String, Integer> represents enemyId and count that player killed, for mission
	private transient Map<String, NpcInteraction> interactions = new ConcurrentHashMap<String, NpcInteraction>();
	

	private transient boolean isUpgraded = false;
	
	//Cache key=id,value=playerpet
	
	//last check pet time.
//	private transient long petCheckPoint = 0; 
	
	//used jx skill only one
	private transient PlayerItem currAQ = null;
	private transient Player lastEnemy = null;
	private transient int lastPkAreaId = 0;
	private transient Integer lastAttackHp = 0;
	private transient Integer lastBeAttack = 0;
	private transient Monster belongMonster = null;
	private transient boolean ifIsMonster = false;
	private transient CommandResult lastResult = null;
	private transient Map<Integer, FightResult> fightAttack = new ConcurrentHashMap<Integer, FightResult>();
	private transient Map<Integer, FightResult> fightDefence = new ConcurrentHashMap<Integer, FightResult>();
	private transient int fightCityStatus = 0;
	private transient int fightPlayerStatus = 0;
	private transient int lastWasteAtkSum = 0;
	private transient int lastWasteDefSum = 0;
	private transient String lastPkAreaDesc = "";
	private transient int instanceEntrance = 0;
	private transient boolean firstEntry = false;
	private transient Map<Integer, Monster> monster = new HashMap<Integer, Monster>();
	private transient Map<Integer, PlayerItem> shortCuts = new HashMap<Integer, PlayerItem>();
	private transient Map<String, ArrayList<PlayerItem>> tempItems = new HashMap<String, ArrayList<PlayerItem>>();
	private transient boolean bookMarkFlag = false;
	
	private transient boolean isExtraProperty = false;//coach and student online add property

	private transient Map<Integer, ItemSuit> itemSuits = new HashMap<Integer, ItemSuit>();
	
	private transient PlayerItem usingHPFeeder;
	private transient PlayerItem usingMPFeeder;
	private transient int figthCityId = 0;
	
	private transient Map<String, Object> recentPresent;
	private transient Map<String, Object> recentGoldPresent;
	private transient int countPresents = -1;
	private transient int sumWorth = -1;
	private transient Date lastCountPresentsTime;
	private transient Date lastsumWorthTime;
	private transient Date lastGiven;	
	private transient Map<Integer, PlayerItem> exchangeItems =  new HashMap<Integer, PlayerItem>();
	
	/****************************************************************************************
     *custom variable: non transient
     * 
     * **************************************************************************************/
	private int room = 0;
	//Recent speeches
	private long lastChatTime = 0; 
	// last message
	private Message latestMessage = null;
	private int missionopen=1;
	
	private PlayerDyn dyn; 
	private String location;
	private boolean specialCity = false;
	private Integer autoAttackFlag = 0;
	private Integer autoAddHpFlag = 0;
	private String title;
	private boolean isCoachFlag = false;
	private boolean wanted = false;
	private boolean autoSail = false;
	private long lastWarNotifyTime = 0;
	
	//
	private ReentrantLock concurrentLock = new ReentrantLock();
	private static Logger logger = Logger.getLogger(Player.class);
	//jiedayuan
	private PlayerKf kf;
	private int vote_times;
	private Calendar lastVoteDate;
	
	private boolean isShow4Offline = false;
	
	//chongyangjie.
	private Calendar lastWishDate;
	private Calendar lastGiveDate;
	private boolean openxiang = false;
	private Calendar hongbaoDate;
	private boolean zhufu = false;
	private Calendar leitaiDate;
	public int leitype=0;
	private Calendar zaixian;
	public transient List<PlayerStoreRoom> storelist=new LinkedList<PlayerStoreRoom>();
	private List<PlayerActiveRewards> activeRewardList = new LinkedList<PlayerActiveRewards>();

//	public void loadPlayerActiveRewards() {
//		Calendar cal = Calendar.getInstance();
//		int dayOfMonth = cal.get(Calendar.DAY_OF_MONTH);
//		Date lastDate = this.getLastLoginTime();
//		Calendar lastLoginCal = Calendar.getInstance();
//		lastLoginCal.setTime(lastDate);
//		int loginLoginDay = lastLoginCal.get(Calendar.DAY_OF_MONTH);
//		if (loginLoginDay != dayOfMonth) {
//			List<PlayerActiveRewards> list = DBManager.queryPlayerReward(this);
//			if (list != null && list.size() > 0) {
//				activeRewardList = list;
//			}
//		}
//	}
	
	/**
     * @return the isShow4Offline
     */
    public boolean isShow4Offline() {
    	return isShow4Offline;
    }

    public boolean isConcurrentAccess() {
    	try {
    		return concurrentLock.isLocked();    		
    	} catch (Exception e) {
    		logger.warn("isConcurrentAccess failed.", e);
    	}
    	return false;
    }
    
    public void lockAccessPrivilige() {
    	try {
        	concurrentLock.lock();    		
    	} catch (Exception e) {
    		logger.warn("lockAccessPrivilige failed.", e);
    	}
    }
    
    public void unLockAccessPrivilige() {
    	try {
        	if (concurrentLock.isLocked()) {
        		concurrentLock.unlock();    		
        	}
    	} catch (Exception e) {
    		logger.warn("unLockAccessPrivilige failed.", e);
    	}

    }
    
	/**
     * @param isShow4Offline the isShow4Offline to set
     */
    public void setShow4Offline(boolean isShow4Offline) {
    	this.isShow4Offline = isShow4Offline;
    }
	public List<PlayerActiveRewards> getActiveRewardMap () {
		return activeRewardList;
	}
	
	public List<PlayerStoreRoom> getStorelist() {
		return storelist;
	}
	public void setStorelist(List<PlayerStoreRoom> storelist) {
		this.storelist = storelist;
	}
	public int getLeitype() {
		return leitype;
	}
	public void setLeitype(int leitype) {
		this.leitype = leitype;
	}
	public Calendar getHongbaoDate() {
		return hongbaoDate;
	}
	public void setHongbaoDate(Calendar hongbaoDate) {
		this.hongbaoDate = hongbaoDate;
	}
	public boolean isOpenxiang() {
		return openxiang;
	}
	public void setOpenxiang(boolean openxiang) {
		this.openxiang = openxiang;
	}
	
	//
	private Map<String, PlayerActive> playerActive = new HashMap<String, PlayerActive>();
	
	private int autoFightMonsterFlag = 0;
	
	//promote player.
	private PlayerPromote playerPromote;
	
	//promote player.
	private Map<Integer,PlayerPromote> playerPromoteMap=new HashMap<Integer, PlayerPromote>();
	/**
     * @return the playerPromote
     */
    public PlayerPromote getPlayerPromote() {
    	return playerPromote;
    }
	public Map<Integer, PlayerPromote> getPlayerPromoteMap() {
		return playerPromoteMap;
	}
	public void setPlayerPromoteMap(Map<Integer, PlayerPromote> playerPromoteMap) {
		this.playerPromoteMap = playerPromoteMap;
	}
	/**
     * @param playerPromote the playerPromote to set
     */
    public void setPlayerPromote(PlayerPromote playerPromote) {
    	this.playerPromote = playerPromote;
    }
	/**
     * @return the autoFightMonsterFlag
     */
    public Integer getAutoFightMonsterFlag() {
    	return autoFightMonsterFlag;
    }
	/**
     * @param autoFightMonsterFlag the autoFightMonsterFlag to set
     */
    public void setAutoFightMonsterFlag(Integer autoFightMonsterFlag) {
    	this.autoFightMonsterFlag = autoFightMonsterFlag;
    }
	/**
     * @return the playerActive
     */
    public Map<String, PlayerActive> getPlayerActive() {
    	return playerActive;
    }
	/**
     * @param playerActive the playerActive to set
     */
    public void setPlayerActive(Map<String, PlayerActive> playerActive) {
    	this.playerActive = playerActive;
    }
	/**
     * @return the lastGiveDate
     */
    public Calendar getLastGiveDate() {
    	return lastGiveDate;
    }
	/**
     * @param lastGiveDate the lastGiveDate to set
     */
    public void setLastGiveDate(Calendar lastGiveDate) {
    	this.lastGiveDate = lastGiveDate;
    }
	/**
     * @return the lastWishDate
     */
    public Calendar getLastWishDate() {
    	return lastWishDate;
    }
	/**
     * @param lastWishDate the lastWishDate to set
     */
    public void setLastWishDate(Calendar lastWishDate) {
    	this.lastWishDate = lastWishDate;
    }
	/**
     * @return the kf
     */
    public PlayerKf getKf() {
    	return kf;
    }
	/**
     * @param kf the kf to set
     */
    public void setKf(PlayerKf kf) {
    	this.kf = kf;
    }
	/**
     * @return the vote_times
     */
    public int getVote_times() {
    	return vote_times;
    }
	/**
     * @param vote_times the vote_times to set
     */
    public void setVote_times(int vote_times) {
    	this.vote_times = vote_times;
    }
	/**
     * @return the lastVoteDate
     */
    public Calendar getLastVoteDate() {
    	return lastVoteDate;
    }
	/**
     * @param lastVoteDate the lastVoteDate to set
     */
    public void setLastVoteDate(Calendar lastVoteDate) {
    	this.lastVoteDate = lastVoteDate;
    }
    
    public boolean isVoteAble() {
    	Calendar today = Calendar.getInstance();
    	if (this.lastVoteDate == null) {
    		this.lastVoteDate = today;
    	}
    	if (this.lastVoteDate.get(Calendar.DATE) != today.get(Calendar.DATE)) {
    		this.lastVoteDate = today;
    		this.vote_times = 0;
    	}
    	if (this.vote_times < 3) {
    		return true;
    	} else {
    		return false;
    	}
    }
	
    /**
     * @return the lastWarNotifyTime
     */
    public long getLastWarNotifyTime() {
    	return lastWarNotifyTime;
    }
	/**
     * @param lastWarNotifyTime the lastWarNotifyTime to set
     */
    public void setLastWarNotifyTime(long lastWarNotifyTime) {
    	this.lastWarNotifyTime = lastWarNotifyTime;
    }
	/**
     * @return the autoSail
     */
    public boolean isAutoSail() {
    	return autoSail;
    }
	/**
     * @param autoSail the autoSail to set
     */
    public void setAutoSail(boolean autoSail) {
    	this.autoSail = autoSail;
    }
    
    
	public void setRoom(int room){ 
		this.room = room; 
	}
	public int getRoom(){ 
		return room; 
	}
	
	public void checkHp() {
		if (hp > dyn.getMaxHp()) {
			hp = dyn.getMaxHp();
		}
	}

	public Map<String, PlayerItem> getAllItems(){
		return (allItems);
	}	

	public Map<String, List<PlayerItem>> getArms(){
		return (arms);
	}	
	
	public List<PlayerItem> getArms(String pos){
		return (arms.get(pos));
	}
	
	public Map<String, List<PlayerItem>> getUsedArms(){
		return (usedArms);
	}	

	public List<PlayerItem> getUsedArms(String pos){
		return (usedArms.get(pos));
	}

	public Map<String, Map<String, PlayerItem>> getNonArms(){
		return(nonArms);
	}
	
	public void setBookMarkFlag(boolean bookMarkFlag) {
		this.bookMarkFlag = bookMarkFlag;
	}

	public boolean isBookMarkFlag() {
		return bookMarkFlag;
	}
	
	/**
	 * consume copper
	 **/
	public boolean consumeInCopper(long n) {
		if(n == 0 )return true;
		if( n < 0 ){
			return false;
		}		
		long copper = this.copper - n;
		if(copper < 0) return false;
		else {
			this.copper -= n;
			DBService.commit(this);
		} 
		return true;
	}
	
	/**
	 * is enough copper
	 **/
	public boolean hasEnoughCopper(long n){
		long copper = this.copper - n;
		if(copper < 0) return false;
		else return true;
	}
	
	/**
	 * consume glod
	 */
	public boolean consumeInGlod(int n) {
		if (n < 0) {
			return false;
		}
		int newGold = gold - n;
		if (newGold >= 0) {
			gold = newGold;
			DBService.commit(this);
			return true;
		}
		return false;
	}
	
	/**
	 * glod 
	 */
	public boolean consumeInAdvGlod(int n) {
		if (n < 0) {
			return false;
		}
		int newAdvGold = advGold - n;
		if (newAdvGold >= 0) {
			advGold = newAdvGold;
			DBService.commit(this);
			return true;
		}
		return false;
	}	
	
	public void addCopper(long amount) {
		this.copper += amount;
		if (this.copper < 0) {
			this.copper = 0l;			
		}
		DBService.commit(this);
	}
	public void addGold(int amount) {
		this.gold += amount;
	}

	public void addAdvGold(int amount) {
		this.advGold += amount;
	}	
	
	
	/**
	 * compute  copper
	 **/
	public long getTotalCopper() {
		return copper;
	}
	
	/**
	 * return player all used
	 **/
	public List<PlayerItem> getUsedArmsList() {
		List<PlayerItem> pis = new LinkedList<PlayerItem>();
		for (List<PlayerItem> ls : usedArms.values()) {
			for (PlayerItem playerItem : ls) {
				if (playerItem != null) {
					pis.add(playerItem);
				}
			}
		}
		return pis;
	}
	
	public int addHp(int n) {
		int oldHp = hp;
		int hpTmp = hp + n;
		if (hpTmp < 0) {
			hp = 0;
		} else if (hpTmp > dyn.getMaxHp()) {
			hp = dyn.getMaxHp();
		} else {
			hp = hpTmp;
		}
		return (hp - oldHp);
	}
	
	
	public int getLastNpcId() {
		return lastNpcId;
	}
	
	public void setLastNpcId(int lastNpcId) {
		this.lastNpcId = lastNpcId;
	}
	
	public boolean isOnline() {
		return status == Constants.STATUS_ONLINE;
	}

	public boolean isOffline() {
		return status == Constants.STATUS_OFFLINE;
	}
	
	public boolean isLocked() {
		return status == Constants.STATUS_LOCKED;
	}

	public long getLastAccessTime() {
		return lastAccessTime;
	}

	public void setLastAccessTime(long lastAccessTime) {
		this.lastAccessTime = lastAccessTime;
	}
    
	
	public void setCityFacility(CityFacility cf) {
		if (cityFacility != null && id != null) {
			cityFacility.removePlayer(id);
			if(cityFacility.getFacility().getIsCity()) fromCityFacilityId = cityFacility.getId();
		} 
		
		cityFacility = cf;
		if (cityFacility != null && id != null) {
			cityFacilityId = cityFacility.getId();
			cityFacility.addPlayer(id);
		}
		
		if(cityFacility == null){
			location = Constants.DEFAULT_LOCATION;
			
			cityFacilityId = 0;
		}
		else{
			location = cityFacility.getLocation();
		}
	}

	
	public void init() {
		status = (byte)Constants.STATUS_OFFLINE;
		copper = 0l;
		fame = 0;
		gold = 0;
		advGold = 0;
		exp = 0;
		lastAccessTime = System.currentTimeMillis();
		Date now = new Date();
		loginTime = now;
		lastLoginTime = now;
		createTime = now;
		level = 1;
		sectId = 0;
		PlayerService.reloadPlayerDyn(this);
		hp = PlayerMG.instance.getPlayerLevel(1).getHp();
		fromCityFacilityId = 0;
		
		setCityFacility(MapMG.BORN_LOCATION);
		missionPast = new PlayerMissionPast();
		missionPast.init();
		missionPast.setMissionIds(new byte[128]);
		description = "";

		if (settingFlag == null) settingFlag = 0;
	}
	
	public int updateOnlineTime() {
		int time = (int) ((lastAccessTime - loginTime.getTime()) / 1000);
		if (time < 0) {
			time = 0;
		}
		return time;
	}
	
	public String printSelf() {
		StringBuffer sb = new StringBuffer();
		sb.append("[pid=").append(id).append(",uid=").append(userId)
			.append(",name=").append(name)
			.append(",level=").append(level)
			.append(",exp=").append(exp)
			.append(",hp=").append(hp)
			.append(",maxHp=").append(dyn==null?0:dyn.getMaxHp())
			.append(",status=").append(status)
			.append(",chatStatus=").append(chatStatus)
			.append(",gold=").append(gold)
			.append(",copper=").append(copper)
			.append(",location=").append(getLocation()==null?"":this.getLocation())
			.append(",scity=").append(startCity)
			.append(",ecity=").append(endCity)
			.append(",]");
		return sb.toString();
	}

	public Map<Integer, Area> getWorldMap() {
		return worldMap;
	}

	public void setWorldMap(Map<Integer, Area> worldMap) {
		this.worldMap = worldMap;
	}

	public Path getPath() {
		return path;
	}

	public Path setPath(int start, int end) {
		path = MapMG.instance.getPath(start, end);
		if (path == null) {
			return null;
		}

		startCity = start;
		endCity = end;
		if (start < end) {
			direction = true;
			pathIndex = 0;
		} else {
			direction = false;
			pathIndex = path.getNodes().size() - 1;
		}
		return path;
	}

	public int getPathFinish() {
		return pathFinish;
	}

	public void setPathFinish(int pathFinish) {
		this.pathFinish = pathFinish;
	}

	public int getTotalLeft() {
		return totalLeft;
	}

	public void setTotalLeft(int totalLeft) {
		this.totalLeft = totalLeft;
	}

	public int getPathIndex() {
		return pathIndex;
	}

	public void setPathIndex(int pathIndex) {
		this.pathIndex = pathIndex;
	}

	public int getStartCity() {
		return startCity;
	}

	public void setStartCity(int startCity) {
		this.startCity = startCity;
	}

	public int getEndCity() {
		return endCity;
	}

	public void setEndCity(int endCity) {
		this.endCity = endCity;
	}

	public boolean isDirection() {
		return direction;
	}

	public void setDirection(boolean direction) {
		this.direction = direction;
	}

	public void setPath(Path path) {
		this.path = path;
	}
	
	public PlayerDyn getDyn() {
		return dyn;
	}

	public void setDyn(PlayerDyn dyn) {
		this.dyn = dyn;
	}

	public int getX() {
		return x;
	}

	public void setX(int x) {
		this.x = x;
	}

	public int getY() {
		return y;
	}

	public void setY(int y) {
		this.y = y;
	}
	
	public Map<String, PlayerMission> getMissions() {
		return missions;
	}

	public void setMissions(Map<String, PlayerMission> missions) {
		this.missions = missions;
	}

	/**
	 * Ongoing mission
	 * 
	 * @param  @param key
	 * @param  @return    
	 * @return PlayerMission    
	 * @throws
	 */
	public PlayerMission getMissionOnGoing(String key) {
		PlayerMission playerMission = this.missions.get(key);

		if (playerMission == null || playerMission.isComplete())
			return null;
		else
			return playerMission;
	}

	public PlayerMission getMission(String key) {
		return this.missions.get(key);
	}

	public void addMission(String key, PlayerMission playerMission) {
		this.missions.put(key, playerMission);
		if (!playerMission.isComplete())
			this.onGoingMissions.put(key, playerMission);
	}

	public PlayerMissionPast getMissionPast() {
		return missionPast;
	}

	public void setMissionPast(PlayerMissionPast missionPast) {
		this.missionPast = missionPast;
	}
	
	public void addPastMission(int missionId) {
		int index = missionId / 8;
		if (index >= missionPast.getMissionIds().length) {
			byte[] b = new byte[index * 11 / 10];
			System.arraycopy(missionPast.getMissionIds(), 0, b, 0, missionPast.getMissionIds().length);

			missionPast.setMissionIds(b);
		}
		missionPast.getMissionIds()[index] += 1 << missionId % 8;
	}

	public boolean inPastMission(int missionId) {
		int index = missionId / 8;
		if (index >= missionPast.getMissionIds().length)
			return false;
		else
			return (missionPast.getMissionIds()[index] & (1 << missionId % 8)) > 0;
	}

	public Map<String, PlayerMission> getOnGoingMissions() {
		return this.onGoingMissions;
	}

	public void setOnGoingMissions(Map<String, PlayerMission> onGoingMissions) {
		this.onGoingMissions = onGoingMissions;
	}


	public long getLastChatTime() {
		return lastChatTime;
	}

	public void setLastChatTime(long lastChatTime) {
		this.lastChatTime = lastChatTime;
	}

	public Message getLatestMessage() {
		return latestMessage;
	}

	public void setLatestMessage(Message latestMessage) {
		if (latestMessage == null || latestMessage.getFromPlayerId() == 0) {
			systemMsgDisplayTimes = 0;
		}

		this.latestMessage = latestMessage;
	}

	public long getReadMessageTime() {
		return readMessageTime;
	}

	public void setReadMessageTime(long readMessageTime) {
		this.readMessageTime = readMessageTime;
	}

	public List<Message> getMessages() {
		return messages;
	}

	public boolean isSpecialCity() {
		return specialCity;
	}

	public void setSpecialCity(boolean specialCity) {
		this.specialCity = specialCity;
	}
	
	/********************************************************************************
	 * NPC interaction   
	 **/
	
	public void setInteraction(String key, int value) {
		NpcInteraction ni = this.interactions.get(key);
		if (ni == null) {
			ni = new NpcInteraction();
			ni.setId(GlobalGenerator.instance.getIdForNewObj(ni));
			ni.setPlayerId(id);
			ni.setK(key);
		}

		ni.setValue(value);
		this.interactions.put(key, ni);

		// Commit
		DBService.commit(ni);
	}

	public void increInteraction(String key) {
		setInteraction(key, getInteraction(key) + 1);
	}

	public void updateInteraction(String key) {
		NpcInteraction ni = this.interactions.get(key);
		if (ni != null) {
			ni.setValue(ni.getValue() + 1);
			// Commit
			DBService.commit(ni);

			this.interactions.put(key, ni);
		}
	}

	public Map<String, NpcInteraction> getInteractions() {
		return this.interactions;
	}

	public int getInteraction(String key) {
		NpcInteraction ni = this.interactions.get(key);

		return ni == null ? 0 : ni.getValue();
	}

	public void clearInteraction(String key) {
		NpcInteraction ni = this.interactions.get(key);

		// Commit
		DBService.commitDelete(ni);
		this.interactions.remove(key);
	}
	
	
	/**
     * @return the isUpgraded
     */
    public boolean isUpgraded() {
    	return isUpgraded;
    }
	/**
     * @param isUpgraded the isUpgraded to set
     */
    public void setUpgraded(boolean isUpgraded) {
    	this.isUpgraded = isUpgraded;
    }
	/**
	 * 
	 * @param amount exp value to add.
	 * @return true represent to upgrade.
	 */
	public boolean addExp(int amount) {
		exp += amount;
		if( exp < dyn.getMaxExp()){
			return false;
		}
		
		while(true){
			if(level >= PlayerMG.MAX_PLAYER_LEVEL){
				break;
			}
			if(upgrade() > exp){
				break;
			}
		}
		
		if (level == 40) {
			//RewardService.invokeDoubleExp(this);
		}
		
		DBService.commit(this);
		//arrive max level?igonor exp
		if( exp >= PlayerMG.MAX_EXP){
			exp = PlayerMG.MAX_EXP;
		}
		return true;
	}
	
	private int upgrade(){
		level++;
		PlayerService.reloadPlayerDyn(this);
		hp = dyn.getMaxHp();
		try {
			setUpgraded(true);
//			LoggerHelper.PlayerLevelUpgrade.logForPlayerUpgrade(this);
		} catch (Exception e) {}
		return dyn.getMaxExp();
	}

	public int getItemAmount(int itemId) {
		PlayerItem playerItem = ItemService.findUnUsePlayerItem(this, ItemMG.instance.getItem(itemId));

		if (playerItem == null) {
			return 0;
		}

		return playerItem.getAmount();
	}

	
	public void dropItem(int itemId, int count) {
		PlayerItem playerItem = ItemService.findUnUsePlayerItem(this, ItemMG.instance.getItem(itemId));

		if (playerItem != null){
			ItemService.releasePlayerItem(this, playerItem, count, true);
		}
	}	
	
	
	public void setFirstEntry(boolean firstEntry) {
		this.firstEntry = firstEntry;
	}

	public boolean isFirstEntry() {
		return firstEntry;
	}
	
	public boolean isInInstacneCity() {
		return (cityFacility != null 
				&& cityFacility.getCity() != null
				&& cityFacility.getCity().getIsInstance());
	}
	
	public int getInstanceEntrance() {
		return instanceEntrance;
	}

	public void setInstanceEntrance(int instanceEntrance) {
		this.instanceEntrance = instanceEntrance;
	}
	
	public CityFacility getCityFacility() {
		return cityFacility;
	}

	public Map<String, ArrayList<PlayerItem>> getTempItems() {
		return tempItems;
	}
	public void setTempItems(Map<String, ArrayList<PlayerItem>> tempItems) {
		this.tempItems = tempItems;
	}
	public void setAutoAttackFlag(Integer autoAttackFlag) {
		this.autoAttackFlag = autoAttackFlag;
	}
	public Integer getAutoAttackFlag() {
		return autoAttackFlag;
	}
	public void setAutoAddHpFlag(Integer autoAddHpFlag) {
		this.autoAddHpFlag = autoAddHpFlag;
	}
	public Integer getAutoAddHpFlag() {
		return autoAddHpFlag;
	}
	public void clrMonster() {
		this.monster.clear();
	}
	public void setMonster(Map<Integer, Monster> monster) {
		this.monster = monster;
	}
	public Map<Integer, Monster> getMonster() {
		return monster;
	}
	public void setShortCuts(Map<Integer, PlayerItem> shortCuts) {
		this.shortCuts = shortCuts;
	}
	public Map<Integer, PlayerItem> getShortCuts() {
		return shortCuts;
	}
	public void setLastEnemy(Player lastEnemy) {
		this.lastEnemy = lastEnemy;
	}

	public Player getLastEnemy() {
		return lastEnemy;
	}

	public void setLastResult(CommandResult lastResult) {
		this.lastResult = lastResult;
	}

	public CommandResult getLastResult() {
		return lastResult;
	}
	public void setIfIsMonster(boolean ifIsMonster) {
		this.ifIsMonster = ifIsMonster;
	}

	public boolean isIfIsMonster() {
		return ifIsMonster;
	}

	public void setBelongMonster(Monster belongMonster) {
		this.belongMonster = belongMonster;
	}

	public Monster getBelongMonster() {
		return belongMonster;
	}

	public void setLastAttackHp(Integer lastAttackHp) {
		this.lastAttackHp = lastAttackHp;
	}

	public Integer getLastAttackHp() {
		return lastAttackHp;
	}

	public void setLastBeAttack(Integer lastBeAttack) {
		this.lastBeAttack = lastBeAttack;
	}

	public Integer getLastBeAttack() {
		return lastBeAttack;
	}

	public void setFightCityStatus(int fightCityStatus) {
		this.fightCityStatus = fightCityStatus;
	}

	public int getFightCityStatus() {
		return fightCityStatus;
	}

	public Map<Integer, FightResult> getFightAttack() {
		return fightAttack;
	}

	public Map<Integer, FightResult> getFightDefence() {
		return fightDefence;
	}

	public void addFightAttack(FightResult fightResult) {
		Integer pid = fightResult.getDst().getId();
		FightResult fr = fightAttack.get(pid);
		if (fr != null) {
			fr.merge(fightResult);
		} else {
			fightAttack.put(pid, fightResult);
		}
	}

	public void addFightDefence(FightResult fightResult) {
		Integer pid = fightResult.getSrc().getId();
		FightResult fr = fightDefence.get(pid);
		if (fr != null) {
			fr.merge(fightResult);
		} else {
			fightDefence.put(pid, fightResult);
		}
	}

	public int addLastWasteAtkSum(int count) {
		this.lastWasteAtkSum += count;
		return this.lastWasteAtkSum;
	}

	public int addLastWasteDefSum(int count) {
		this.lastWasteDefSum += count;
		return this.lastWasteDefSum;
	}

//	public List<PlayerItem> wasteAtkAndDef(boolean isDead) {
//		List<PlayerItem> wasted = ItemService.wasteAll(this, this.lastWasteAtkSum, this.lastWasteDefSum);
//		this.lastWasteAtkSum = 0;
//		this.lastWasteDefSum = 0;
//		//if lose, all waste +10%
//		if (isDead) {
//			List<PlayerItem> wastedForDead = ItemService.wasteForDead(this);
//			if (wastedForDead != null) {
//				wasted.addAll(wastedForDead);
//			}
//		}
//		return wasted;
//	}

	public void setFightPlayerStatus(int fightPlayerStatus) {
		this.fightPlayerStatus = fightPlayerStatus;
	}
	public int getFightPlayerStatus() {
		return fightPlayerStatus;
	}

	public void setLastPkAreaId(int lastPkAreaId) {
		this.lastPkAreaId = lastPkAreaId;
	}

	public int getLastPkAreaId() {
		return lastPkAreaId;
	}

	public void setLastPkAreaDesc(String lastPkAreaDesc) {
		this.lastPkAreaDesc = lastPkAreaDesc;
	}

	public String getLastPkAreaDesc() {
		return lastPkAreaDesc;
	}
	

	public int getSystemMsgDisplayTimes() {
		return systemMsgDisplayTimes;
	}

	public void setSystemMsgDisplayTimes(int systemMsgDisplayTimes) {
		this.systemMsgDisplayTimes = systemMsgDisplayTimes;
	}
	public String getIp() {
		return ip;
	}
	public void setIp(String ip) {
		this.ip = ip;
	}
		public long getStartTime() {
		return startTime;
	}
	public void setStartTime(long startTime) {
		this.startTime = startTime;
	}
	public long getReqTimes() {
		return reqTimes;
	}
	public void setReqTimes(long reqTimes) {
		this.reqTimes = reqTimes;
	}
		
	public boolean isCoachFlag() {
		return isCoachFlag;
	}
	public void setCoachFlag(boolean isCoachFlag) {
		this.isCoachFlag = isCoachFlag;
	}
	public boolean isExtraProperty() {
		return isExtraProperty;
	}
	public void setExtraProperty(boolean isExtraProperty) {
		this.isExtraProperty = isExtraProperty;
	}
	
	public void addUsingItem(PlayerItemUsing usingItem) {
		this.usingItems.add(usingItem);
	}
	
	/**
	 * @param itemId
	 * @return
	 */
	public PlayerItemUsing getUsingItem(String itemId) {
		for (PlayerItemUsing usintItem: usingItems) {
			if (itemId.equals(usintItem.getItemId().toString())) {
				return usintItem;
			}
		}
		return null;
	}
	
	/**
	 * @return
	 */
	public List<PlayerItemUsing> getUsingItemList() {
		return usingItems;
	}
	/**
	 * @param usingItemList
	 */
	public void addUsingItemList(List<PlayerItemUsing>  usingItemList) {
		usingItems.addAll(usingItemList);
	}
	
	/**
	 * @param usingItem
	 */
	public void removeUsingItem(PlayerItemUsing usingItem) {
		this.usingItems.remove(usingItem);
		PlayerService.reloadPlayerDyn(this);
		DBService.commitDelete(usingItem);
	}
	
	public PlayerItem getPlayerItem(int playerItemId) {
		return allItems.get(String.valueOf(playerItemId));
	}
	
	public void setLocation(String location) {
		this.location = location;
	}	
	
	public String getLocation(){
		return location;
	}
	
//	public PlayerLevel getPlayerLevel(){
//		if(playerLevel == null || playerLevel.getLevel().intValue() != level)
//			playerLevel = PlayerMG.instance.getPlayerLevel(level);
//		return playerLevel;
//	}
	
	public PlayerItem getCurrAQ() {
		return currAQ;
	}
	public void setCurrAQ(PlayerItem currAQ) {
		this.currAQ = currAQ;
	}
	
	/**
	 * @return the itemSuits
	 */
	public Map<Integer, ItemSuit> getItemSuits() {
		return itemSuits;
	}
	
	public List<ItemSuit> getItemSuitList() {
		return new ArrayList<ItemSuit>(itemSuits.values());
//		List<ItemSuit> itemSuitList = new ArrayList<ItemSuit>();
//		
//		for (Map.Entry<Integer, ItemSuit> entry : itemSuits.entrySet()) {
//			itemSuitList.add(entry.getValue());
//		}
//		return itemSuitList;
	}
	
	/**
	 * @param itemSuits the itemSuits to set
	 */
	public void setItemSuits(Map<Integer, ItemSuit> itemSuits) {
		this.itemSuits = itemSuits;
	}

	public String getTitle() {
		return title;
	}
	public void setTitle(String title) {
		this.title = title;
	}
	public int getMatchStatus() {
		return matchStatus;
	}
	public void setMatchStatus(int matchStatus) {
		this.matchStatus = matchStatus;
	}
	
	/**
	 * @return the enemies
	 */
	public Map<String, PlayerEnemy> getEnemies() {
		return enemies;
	}
	
	public List<PlayerEnemy> getEnemyList() {
		List<PlayerEnemy> list = new ArrayList<PlayerEnemy>();
		for (Map.Entry<String, PlayerEnemy> entry : this.enemies.entrySet()) {
			list.add(entry.getValue());
		}
		return list;
	}
	
	public void addEnemy(PlayerEnemy enemy) {
		PlayerEnemy playerEnemy = enemies.get(enemy.getEnemyId().toString());
		if (playerEnemy == null) {
			if (enemy.getKilledTimes() != null) {
				enemy.setKilledTimes(enemy.getKilledTimes());				
			} else {
				enemy.setKilledTimes(1);
			}
		} else {
			enemy.setKilledTimes(1+playerEnemy.getKilledTimes());
		}
		enemies.put(enemy.getEnemyId().toString(), enemy);
	}
	
	/**
	 * @param enemies the enemies to set
	 */
	public void setEnemies(Map<String, PlayerEnemy> enemies) {
		this.enemies = enemies;
	}
	/**
	 * @return the rewards
	 */
	public Map<PlayerMission, MissionCondition> getRewards() {
		return rewards;
	}
	/**
	 * @param rewards the rewards to set
	 */
	public void setRewards(Map<PlayerMission, MissionCondition> rewards) {
		this.rewards = rewards;
	}
	public int getCityId() {
		if (cityFacility == null) {
			return path.getCityId(pathIndex);
		}
		return cityFacility.getCityId();
	}
	public City getCity() {
		try {
			if (cityFacility != null) {
				return cityFacility.getCity();
			} else {
				return MapMG.instance.getCity(path.getCityId(pathIndex));
			}
		} catch (Exception e) {
		}
		return null;
	}
		
	public boolean isWanted() {
		return wanted;
	}

	public void setWanted(boolean wanted) {
		this.wanted = wanted;
	}
	public PlayerItem getUsingHPFeeder() {
		return usingHPFeeder;
	}
	public void setUsingHPFeeder(PlayerItem usingHPFeeder) {
		this.usingHPFeeder = usingHPFeeder;
	}
	public PlayerItem getUsingMPFeeder() {
		return usingMPFeeder;
	}
	public void setUsingMPFeeder(PlayerItem usingMPFeeder) {
		this.usingMPFeeder = usingMPFeeder;
	}
	
	public Date getLastCountPresentsTime() {
		return lastCountPresentsTime;
	}

	public void setLastCountPresentsTime(Date lastCountPresentsTime) {
		this.lastCountPresentsTime = lastCountPresentsTime;
	}

	public Date getLastsumWorthTime() {
		return lastsumWorthTime;
	}

	public void setLastsumWorthTime(Date lastsumWorthTime) {
		this.lastsumWorthTime = lastsumWorthTime;
	}

	public Map<String, Object> getRecentPresent() {
		return recentPresent;
	}

	public void setRecentPresent(Map<String, Object> recentPresent) {
		this.recentPresent = recentPresent;
	}

	public Map<String, Object> getRecentGoldPresent() {
		return recentGoldPresent;
	}

	public void setRecentGoldPresent(Map<String, Object> recentGoldPresent) {
		this.recentGoldPresent = recentGoldPresent;
	}

	public int getCountPresents() {
		return countPresents;
	}

	public void setCountPresents(int countPresents) {
		this.countPresents = countPresents;
	}

	public int getSumWorth() {
		return sumWorth;
	}

	public void setSumWorth(int sumWorth) {
		this.sumWorth = sumWorth;
	}
	public Date getLastGiven() {
		return lastGiven;
	}
	public void setLastGiven(Date lastGiven) {
		this.lastGiven = lastGiven;
	}
	
	public Map<Integer, PlayerItem> getExchangeItems() {
		return exchangeItems;
	}

	public void setExchangeItems(Map<Integer, PlayerItem> exchangeItems) {
		this.exchangeItems = exchangeItems;
	}
	public int getFigthCityId() {
		return figthCityId;
	}
	public void setFigthCityId(int figthCityId) {
		this.figthCityId = figthCityId;
	}
	private int pos = -1;
	private boolean fight_note = false;
	public synchronized int getNextMonsterId() {
		pos = this.getMonster().size() - 2 * this.getMonster().size();
		Monster m = this.getMonster().get(pos);
		if (m == null) {
			MonsterMG.instance.getMonsterToPlayer(this);
			pos = this.getMonster().size() - 2 * this.getMonster().size();
		} else {
			pos = pos++;
		}
		//System.out.println("pospospospospospospospospospospospos"+pos);
		return pos;
	}
	/**
     * @return the fight_note
     */
    public boolean isFight_note() {
    	return fight_note;
    }
	/**
     * @param fight_note the fight_note to set
     */
    public void setFight_note(boolean fight_note) {
    	this.fight_note = fight_note;
    }
    
    //for fishing.
    private int lastLureId = 0;
    private int lastFishNoteId = 0;
    private Map<Integer,PlayerFishing> fishWishes = new ConcurrentHashMap<Integer, PlayerFishing>();
    
    private transient PlayerPay playerPay;

	/**
     * @return the playerPay
     */
    public PlayerPay getPlayerPay() {
    	return playerPay;
    }
	/**
     * @param playerPay the playerPay to set
     */
    public void setPlayerPay(PlayerPay playerPay) {
    	this.playerPay = playerPay;
    }
	/**
     * @return the fishWishes
     */
    public Map<Integer,PlayerFishing> getFishWishes() {
    	return fishWishes;
    }
	/**
     * @param fishWishes the fishWishes to set
     */
    public void setFishWishes(Map<Integer,PlayerFishing> fishWishes) {
    	this.fishWishes = fishWishes;
    }
	/**
     * @return the lastFishNoteId
     */
    public int getLastFishNoteId() {
    	return lastFishNoteId;
    }
	/**
     * @param lastFishNoteId the lastFishNoteId to set
     */
    public void setLastFishNoteId(int lastFishNoteId) {
    	this.lastFishNoteId = lastFishNoteId;
    }
	/**
     * @return the lastLureId
     */
    public int getLastLureId() {
    	return lastLureId;
    }
	/**
     * @param lastLureId the lastLureId to set
     */
    public void setLastLureId(int lastLureId) {
    	this.lastLureId = lastLureId;
    }
	public void setZhufu(boolean zhufu) {
		this.zhufu = zhufu;
	}
	public boolean isZhufu() {
		return zhufu;
	}
	public void setLeitaiDate(Calendar leitaiDate) {
		this.leitaiDate = leitaiDate;
	}
	public Calendar getLeitaiDate() {
		return leitaiDate;
	}
	public void setZaixian(Calendar zaixian) {
		this.zaixian = zaixian;
	}
	public Calendar getZaixian() {
		return zaixian;
	}
	public void setMissionopen(int missionopen) {
		this.missionopen = missionopen;
	}
	public int getMissionopen() {
		return missionopen;
	}
	public void setOnlinedate(Date onlinedate) {
		this.onlinedate = onlinedate;
	}
	public Date getOnlinedate() {
		return onlinedate;
	}
	public ErrorMsg addItem(int itemId, int count) {
		ErrorMsg msg = ItemService.addItem(this, itemId, count, false);
		return msg;
	}
    
		//db object cache in memory 倒卖系统
		private transient PlayerResell playerResell;
		//temp data in memory
		private transient List<BoughtPriceVo> idBoughtGoodsList = new ArrayList<BoughtPriceVo>();//已经购买的货�?
		private transient Map<Integer,List<SellPriceVo>> priceListMap = new HashMap<Integer, List<SellPriceVo>>();//档次类型分类的价格表；购买列表显�?
		private transient Map<Integer,SellPriceVo> idPriceMap = new HashMap<Integer, SellPriceVo>();//价格总表；方便查询当前价�?
		
		public PlayerResell getPlayerResell() {
			return playerResell;
		}
		/**
		 * 调用处：刷新物价、载入内存�?初始�?
		 * update playerResell to boughtGoods and priceList
		 * @param pr
		 */
		public void setPlayerResell(PlayerResell pr) {
			this.playerResell = pr;
			
			//更新到内�?(id|price,)#( BoughtPriceVo  id name price randomCode) 
			String bg = pr.getBoughtGoods();
			int totalValue = 0;
			if(bg.length()>0){
				String [] bgs = bg.split("\\,");
				for (String b : bgs) {
					String [] bs = b.split("\\|");
					int id = Integer.valueOf(bs[0]);
					int price = Integer.valueOf(bs[1]);
					
					BoughtPriceVo prVo = new BoughtPriceVo(id,"",price,PlayerResellService.getRandomCode());
					idBoughtGoodsList.add(prVo);
					totalValue += price*1;//use to update "goods_value"
				}
			}
			
			//synchronize update :"goods_value" by calculate
			this.playerResell.setGoodsValue(totalValue);
			//注意记录�?name sign isBuy 变量的来龙去�?
			//synchronize update:"price_list" to priceListMap;  (id|price|sign,)#(SellPriceVo  id name price sign isBuy)
			String pl = pr.getPriceList();
			String [] pls = pl.split("\\,");
			for (String p : pls) {
				String [] ps = p.split("\\|");
				int plType = ResellPriceMG.instance.getResellGoodType(Integer.valueOf(ps[0]));
				
				int isBuy = 0;
				if(isContainsBoughtGoods(Integer.valueOf(ps[0]))){isBuy = 1;}//标记是否已经购买，用于页面展�?
				SellPriceVo prVo = new SellPriceVo(Integer.valueOf(ps[0]),"",Integer.valueOf(ps[1]),Integer.valueOf(ps[2]),isBuy);
				PlayerResellService.updateSellPriceVoName(prVo);//查询更新货物名字--新增
				if(priceListMap.containsKey(plType)){
					priceListMap.get(plType).add(prVo);
				}else{
					LinkedList plLl = new LinkedList<SellPriceVo>();
					plLl.add(prVo);
					priceListMap.put(plType, plLl);
				}
				idPriceMap.put(prVo.getId(), prVo);
			}
			PlayerResellService.updateCurrPrice(idBoughtGoodsList, idPriceMap);//价格变动--更新当前价格
		}
		/**
		 * 调用处：货物增减
		 * update boughtGoodsMap data to playerResell 
		 * string format like this�?id |name |price,
		 * @param bgm
		 */
		public void setBoughtGoods(List<BoughtPriceVo> bgList){
			this.idBoughtGoodsList.clear();
			this.idBoughtGoodsList.addAll(bgList);
			PlayerResellService.updateBoughtPriceVoName(idBoughtGoodsList);//查询更新货物名字
			PlayerResellService.updateCurrPrice(idBoughtGoodsList, idPriceMap);//更新当前价格--新增添加价格进去
			
			//同时更新playerResell 相关字段
			StringBuilder sb = new StringBuilder();
			int totalValue = 0;
			for (BoughtPriceVo pv : bgList) {//id|price,   数量默认�?
				sb.append(pv.getId()).append("|").append(pv.getPrice()).append(",");
				totalValue +=pv.getPrice();
			}
			String result = sb.toString();
			String resultLast = "";
			if(result.length()>0){
				resultLast = result.substring(0,result.length()-1);
			}
			this.playerResell.setBoughtGoods(resultLast);
			
			this.playerResell.setGoodsValue(totalValue);
		}
		
		/**
		 * Your current Price List of  Goods
		 * @param type
		 * @return
		 */
		public List<SellPriceVo> getPriceList(int type) {
			if(priceListMap.containsKey(type)){
				return priceListMap.get(type);
			}
			return null;
		}
		
		/**
		 * get PriceVo by Goods Id
		 * @param priceId
		 * @return
		 */
		public SellPriceVo getPriceById(int goodsId){
			return idPriceMap.get(goodsId);
		}
		/**
		 * Goods of You Already Bought 
		 * @return
		 */
		public List<BoughtPriceVo> getBoughtGoods(){
			return this.idBoughtGoodsList;
		}
		
		/**
		 * 是否包含已经购买的货�?
		 * @param goodsId
		 * @return
		 */
		public boolean isContainsBoughtGoods(int goodsId){
			if(idBoughtGoodsList == null){
				return false;
			}
			for (BoughtPriceVo goods : idBoughtGoodsList) {
				if(goods.getId() ==  goodsId){
					return true;
				}
			}
			return false;
		}
		
		/**
		 * 由下标取得已购买货物对象
		 * @param objIndex
		 * @return
		 */
		public BoughtPriceVo getBoughtPriceVo(int objIndex){
			if(objIndex>=idBoughtGoodsList.size()){
				return null;
			}else{
				return this.idBoughtGoodsList.get(objIndex);
			}
		}
	
	/**
	 * 存放玩家临时数据，不用每加一个属性就要一个字�?
	 * key统一�?
	 * String类型可以灵活转换
	 */
	private Map<String, String> tmpMap = new HashMap<String, String>();
	public Map<String, String> getTmpMap() {
		return tmpMap;
	}
	/**
	 * 玩家身上的镖�?
	 */
	private PlayerDart playerDart = null;
	public PlayerDart getPlayerDart() {
		return playerDart;
	}
	public void setPlayerDart(PlayerDart playerDart) {
		this.playerDart = playerDart;
	}
	private Map<String, GetOnce> getOnce = new HashMap<String, GetOnce>();
	public Map<String, GetOnce> getGetOnce() {
		return getOnce;
	}
	public void setGetOnce(Map<String, GetOnce> getOnce) {
		this.getOnce = getOnce;
	}
	
	private Map<Integer, PlayerDartPrize> playerDartPrize = new HashMap<Integer, PlayerDartPrize>();
	public Map<Integer, PlayerDartPrize> getPlayerDartPrize() {
		return playerDartPrize;
	}
	public void setPlayerDartPrize(Map<Integer, PlayerDartPrize> playerDartPrize) {
		this.playerDartPrize = playerDartPrize;
	}
	private TreeMap<Integer, PlayerSkill> playerSkill = new TreeMap<Integer, PlayerSkill>();
	public TreeMap<Integer, PlayerSkill> getPlayerSkill() {
		return playerSkill;
	}
	public void setPlayerSkill(TreeMap<Integer, PlayerSkill> playerSkill) {
		this.playerSkill = playerSkill;
	}
	
	/**
	 * 扣除武魂
	 * @param amount
	 * @return
	 */
	public boolean consumEternal(int amount){
		if (amount <= 0) {
			return false;
		}
		if(eternal < amount){
			return false;
		}
		eternal -= amount;
		return true;
	}
	public void addEternal(int amount){
		long tmp = eternal + amount;
		if (tmp >= Integer.MAX_VALUE) {
			amount = Integer.MAX_VALUE - eternal;
		}
		eternal += amount;
	}
	
	private TreeMap<Integer, PlayerFarm> playerFarm = new TreeMap<Integer, PlayerFarm>();
	public TreeMap<Integer, PlayerFarm> getPlayerFarm() {
		return playerFarm;
	}
	public void setPlayerFarm(TreeMap<Integer, PlayerFarm> playerFarm) {
		this.playerFarm = playerFarm;
	}
	
}